

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 06 12:50:43 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	PF462XXX
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext1,local,class=CONST,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	pa_nodes0,global,class=CODE,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 2.20
    49                           ; Generated 09/04/2020 GMT
    50                           ; 
    51                           ; Code-generator required, PIC16F685 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataBANK0
    56  0000                     __pidataBANK0:	
    57  001F                     _ADCON0	set	31
    58  001E                     _ADRESH	set	30
    59  001B                     _MSCKCON	set	27
    60  0019                     _CMCON0	set	25
    61  0018                     _WDTCON	set	24
    62  0010                     _T1CON	set	16
    63  000F                     _TMR1H	set	15
    64  000E                     _TMR1L	set	14
    65  000B                     _INTCON	set	11
    66  0007                     _PORTC	set	7
    67  0005                     _PORTA	set	5
    68  00F9                     _GO_DONE	set	249
    69  00F8                     _ADON	set	248
    70  00C0                     _SWDTEN	set	192
    71  0080                     _TMR1ON	set	128
    72  0067                     _EEIF	set	103
    73  0060                     _TMR1IF	set	96
    74  005F                     _GIE	set	95
    75  005E                     _PEIE	set	94
    76  005C                     _INTE	set	92
    77  005B                     _PAIE	set	91
    78  0059                     _INTF	set	89
    79  0058                     _PAIF	set	88
    80  003D                     _PC5	set	61
    81  003B                     _PC3	set	59
    82  0039                     _PC1	set	57
    83  002F                     _PA7	set	47
    84  002E                     _PA6	set	46
    85  002C                     _PA4	set	44
    86  002B                     _PA3	set	43
    87  002A                     _PA2	set	42
    88  009F                     _ADCON1	set	159
    89  009E                     _ADRESL	set	158
    90  009C                     _EECON1	set	156
    91  009B                     _EEADR	set	155
    92  009A                     _EEDAT	set	154
    93  0096                     _IOCA	set	150
    94  0095                     _WPUA	set	149
    95  0091                     _ANSEL	set	145
    96  008F                     _OSCCON	set	143
    97  0088                     _WPUC	set	136
    98  0087                     _TRISC	set	135
    99  0085                     _TRISA	set	133
   100  0081                     _OPTION	set	129
   101  04E8                     _WR	set	1256
   102  04E0                     _RD	set	1248
   103  04AB                     _WPUA3	set	1195
   104  04AA                     _WPUA2	set	1194
   105  0460                     _TMR1IE	set	1120
   106  0441                     _WPUC1	set	1089
   107  043B                     _TRISC3	set	1083
   108  042B                     _TRISA3	set	1067
   109  042A                     _TRISA2	set	1066
   110  040E                     _INTEDG	set	1038
   111  040B                     _PSA	set	1035
   112                           
   113                           	psect	cinit
   114  000B                     start_initialization:	
   115                           ; #config settings
   116                           
   117  000B                     __initialization:	
   118                           
   119                           ;initializer for _g_event_t
   120  000B  3004               	movlw	4
   121  000C  00C6               	movwf	__pdataBANK0& (0+127)
   122                           
   123                           ;initializer for _g_checkMode
   124  000D  00C7               	movwf	(__pdataBANK0+1)& (0+127)
   125                           
   126                           ;initializer for _Seg_0F
   127  000E  30C0               	movlw	192
   128  000F  00C8               	movwf	(__pdataBANK0+2)& (0+127)
   129  0010  30F9               	movlw	249
   130  0011  00C9               	movwf	(__pdataBANK0+3)& (0+127)
   131  0012  30A4               	movlw	164
   132  0013  00CA               	movwf	(__pdataBANK0+4)& (0+127)
   133  0014  30B0               	movlw	176
   134  0015  00CB               	movwf	(__pdataBANK0+5)& (0+127)
   135  0016  3099               	movlw	153
   136  0017  00CC               	movwf	(__pdataBANK0+6)& (0+127)
   137  0018  3092               	movlw	146
   138  0019  00CD               	movwf	(__pdataBANK0+7)& (0+127)
   139  001A  3082               	movlw	130
   140  001B  00CE               	movwf	(__pdataBANK0+8)& (0+127)
   141  001C  30F8               	movlw	248
   142  001D  00CF               	movwf	(__pdataBANK0+9)& (0+127)
   143  001E  3080               	movlw	128
   144  001F  00D0               	movwf	(__pdataBANK0+10)& (0+127)
   145  0020  3090               	movlw	144
   146  0021  00D1               	movwf	(__pdataBANK0+11)& (0+127)
   147  0022  3088               	movlw	136
   148  0023  00D2               	movwf	(__pdataBANK0+12)& (0+127)
   149  0024  3083               	movlw	131
   150  0025  00D3               	movwf	(__pdataBANK0+13)& (0+127)
   151  0026  30C6               	movlw	198
   152  0027  00D4               	movwf	(__pdataBANK0+14)& (0+127)
   153  0028  30A1               	movlw	161
   154  0029  00D5               	movwf	(__pdataBANK0+15)& (0+127)
   155  002A  3086               	movlw	134
   156  002B  00D6               	movwf	(__pdataBANK0+16)& (0+127)
   157  002C  308E               	movlw	142
   158  002D  00D7               	movwf	(__pdataBANK0+17)& (0+127)
   159  002E  30BF               	movlw	191
   160  002F  00D8               	movwf	(__pdataBANK0+18)& (0+127)
   161  0030  30EF               	movlw	239
   162  0031  00D9               	movwf	(__pdataBANK0+19)& (0+127)
   163  0032  305A               	movlw	low __pbssBANK0
   164                           
   165                           ; Clear objects allocated to BANK0
   166  0033  1383               	bcf	3,7	;select IRP bank0
   167  0034  0084               	movwf	4
   168  0035  306B               	movlw	low (__pbssBANK0+17)
   169  0036  2622               	fcall	clear_ram0
   170                           
   171                           ; Clear objects allocated to COMMON
   172  0037  01FA               	clrf	__pbssCOMMON& (0+127)
   173  0038  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   174  0039                     end_of_initialization:	
   175                           ;End of C runtime variable initialization code
   176                           
   177  0039                     __end_of__initialization:	
   178  0039  0183               	clrf	3
   179  003A  2B1C               	ljmp	_main	;jump to C main() function
   180                           
   181                           	psect	bssCOMMON
   182  007A                     __pbssCOMMON:	
   183  007A                     _g_ledkeep:	
   184  007A                     	ds	2
   185                           
   186                           	psect	bssBANK0
   187  005A                     __pbssBANK0:	
   188  005A                     Solar_BaseDefine@ad_vpre:	
   189  005A                     	ds	2
   190  005C                     Sola_checkFuc@ad_vpre:	
   191  005C                     	ds	2
   192  005E                     _g_gloCurValue:	
   193  005E                     	ds	2
   194  0060                     _g_gloRecValue:	
   195  0060                     	ds	2
   196  0062                     _g_adBaseValue:	
   197  0062                     	ds	2
   198  0064                     GLO_cdsCheckFuc@av_check_dt:	
   199  0064                     	ds	1
   200  0065                     GLO_cdsCheckFuc@av_check_lt:	
   201  0065                     	ds	1
   202  0066                     _g_cdsCmp:	
   203  0066                     	ds	1
   204  0067                     _g_light_stvalue:	
   205  0067                     	ds	1
   206  0068                     _g_checkStBits:	
   207  0068                     	ds	1
   208  0069                     _g_gloCntTimer:	
   209  0069                     	ds	1
   210  006A                     _g_gloEnvt_st:	
   211  006A                     	ds	1
   212                           
   213                           	psect	dataBANK0
   214  0046                     __pdataBANK0:	
   215  0046                     _g_event_t:	
   216  0046                     	ds	1
   217  0047                     _g_checkMode:	
   218  0047                     	ds	1
   219  0048                     _Seg_0F:	
   220  0048                     	ds	18
   221                           
   222                           	psect	clrtext
   223  0622                     clear_ram0:	
   224                           ;	Called with FSR containing the base address, and
   225                           ;	W with the last address+1
   226                           
   227  0622  0064               	clrwdt	;clear the watchdog before getting into this loop
   228  0623                     clrloop0:	
   229  0623  0180               	clrf	0	;clear RAM location pointed to by FSR
   230  0624  0A84               	incf	4,f	;increment pointer
   231  0625  0604               	xorwf	4,w	;XOR with final address
   232  0626  1903               	btfsc	3,2	;have we reached the end yet?
   233  0627  3400               	retlw	0	;all done for this memory range, return
   234  0628  0604               	xorwf	4,w	;XOR again to restore value
   235  0629  2E23               	goto	clrloop0	;do the next byte
   236                           
   237                           	psect	cstackCOMMON
   238  0070                     __pcstackCOMMON:	
   239  0070                     ?_DelayMs:	
   240  0070                     ?_ISR:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ??_ISR:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_oneGLO:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_Charg_Disp:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_TIMER1_INTSTART:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_TIMER1_INTSTOP:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_POWER_INITIAL:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_ADC_INITIAL:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_WDT_INITIAL:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_INT_INITIAL:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_eventEnterOFF:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_eventExitOFF:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_Mode_changeCheckFuc:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_Event_checkFuc:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_chrg_ModeCheck:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_Sola_checkFuc:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_GLO_cdsCheckFuc:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_Solar_BaseDefine:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_DelayUs:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_EEPROMread:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_EEPROM_Init:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_Version_Write:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_AD_baseGetFuc:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_TestFunc_Enable:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_TestFunc_Disable:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_main:	
   316                           ; 1 bytes @ 0x0
   317                           
   318                           
   319                           ; 1 bytes @ 0x0
   320  0070                     	ds	2
   321  0072                     ?_EEPROMwrite:	
   322  0072                     ??_TIMER1_INTSTART:	
   323                           ; 1 bytes @ 0x2
   324                           
   325  0072                     ??_TIMER1_INTSTOP:	
   326                           ; 1 bytes @ 0x2
   327                           
   328  0072                     ??_POWER_INITIAL:	
   329                           ; 1 bytes @ 0x2
   330                           
   331  0072                     ??_ADC_INITIAL:	
   332                           ; 1 bytes @ 0x2
   333                           
   334  0072                     ??_WDT_INITIAL:	
   335                           ; 1 bytes @ 0x2
   336                           
   337  0072                     ??_INT_INITIAL:	
   338                           ; 1 bytes @ 0x2
   339                           
   340  0072                     ??_eventEnterOFF:	
   341                           ; 1 bytes @ 0x2
   342                           
   343  0072                     ??_eventExitOFF:	
   344                           ; 1 bytes @ 0x2
   345                           
   346  0072                     ??_DelayUs:	
   347                           ; 1 bytes @ 0x2
   348                           
   349  0072                     ??_EEPROMread:	
   350                           ; 1 bytes @ 0x2
   351                           
   352  0072                     ??_TestFunc_Enable:	
   353                           ; 1 bytes @ 0x2
   354                           
   355  0072                     ??_TestFunc_Disable:	
   356                           ; 1 bytes @ 0x2
   357                           
   358  0072                     ?_GET_ADC_DATA:	
   359                           ; 1 bytes @ 0x2
   360                           
   361  0072                     ?___wmul:	
   362                           ; 2 bytes @ 0x2
   363                           
   364  0072                     DelayUs@Time:	
   365                           ; 2 bytes @ 0x2
   366                           
   367  0072                     EEPROMread@EEAddr:	
   368                           ; 1 bytes @ 0x2
   369                           
   370  0072                     EEPROMwrite@Data:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0072                     ___wmul@multiplier:	
   374                           ; 1 bytes @ 0x2
   375                           
   376                           
   377                           ; 2 bytes @ 0x2
   378  0072                     	ds	1
   379  0073                     ??_EEPROMwrite:	
   380  0073                     DelayUs@a:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     EEPROMread@ReEEPROMread:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     EEPROMwrite@EEAddr:	
   387                           ; 1 bytes @ 0x3
   388                           
   389                           
   390                           ; 1 bytes @ 0x3
   391  0073                     	ds	1
   392  0074                     ??_DelayMs:	
   393  0074                     ??_AD_baseGetFuc:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     DelayMs@Time:	
   397                           ; 1 bytes @ 0x4
   398                           
   399  0074                     EEPROMwrite@gietag:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     AD_baseGetFuc@ad_vl2:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     ___wmul@multiplicand:	
   406                           ; 1 bytes @ 0x4
   407                           
   408                           
   409                           ; 2 bytes @ 0x4
   410  0074                     	ds	1
   411  0075                     ?_AD_baseWriteFuc:	
   412  0075                     ??_GET_ADC_DATA:	
   413                           ; 1 bytes @ 0x5
   414                           
   415  0075                     ??_EEPROM_Init:	
   416                           ; 1 bytes @ 0x5
   417                           
   418  0075                     ??_Version_Write:	
   419                           ; 1 bytes @ 0x5
   420                           
   421  0075                     GET_ADC_DATA@AD_chBuff:	
   422                           ; 1 bytes @ 0x5
   423                           
   424  0075                     DelayMs@a:	
   425                           ; 1 bytes @ 0x5
   426                           
   427  0075                     EEPROM_Init@ep_t:	
   428                           ; 1 bytes @ 0x5
   429                           
   430  0075                     Version_Write@V_d:	
   431                           ; 1 bytes @ 0x5
   432                           
   433  0075                     AD_baseGetFuc@ad_vh2:	
   434                           ; 1 bytes @ 0x5
   435                           
   436  0075                     AD_baseWriteFuc@ad_vt:	
   437                           ; 1 bytes @ 0x5
   438                           
   439                           
   440                           ; 2 bytes @ 0x5
   441  0075                     	ds	1
   442  0076                     ??___wmul:	
   443  0076                     DelayMs@b:	
   444                           ; 1 bytes @ 0x6
   445                           
   446  0076                     Version_Write@D_d:	
   447                           ; 1 bytes @ 0x6
   448                           
   449  0076                     AD_baseGetFuc@ad_vl:	
   450                           ; 1 bytes @ 0x6
   451                           
   452  0076                     GET_ADC_DATA@ADC_DATA:	
   453                           ; 1 bytes @ 0x6
   454                           
   455  0076                     ___wmul@product:	
   456                           ; 2 bytes @ 0x6
   457                           
   458                           
   459                           ; 2 bytes @ 0x6
   460  0076                     	ds	1
   461  0077                     ??_AD_baseWriteFuc:	
   462  0077                     ??_oneGLO:	
   463                           ; 1 bytes @ 0x7
   464                           
   465  0077                     ??_Charg_Disp:	
   466                           ; 1 bytes @ 0x7
   467                           
   468  0077                     ??_Mode_changeCheckFuc:	
   469                           ; 1 bytes @ 0x7
   470                           
   471  0077                     ??_Event_checkFuc:	
   472                           ; 1 bytes @ 0x7
   473                           
   474  0077                     Charg_Disp@chg_t:	
   475                           ; 1 bytes @ 0x7
   476                           
   477  0077                     AD_baseGetFuc@ad_vh:	
   478                           ; 1 bytes @ 0x7
   479                           
   480                           
   481                           ; 1 bytes @ 0x7
   482  0077                     	ds	1
   483  0078                     ??_chrg_ModeCheck:	
   484  0078                     ??_GLO_cdsCheckFuc:	
   485                           ; 1 bytes @ 0x8
   486                           
   487  0078                     ??___lwdiv:	
   488                           ; 1 bytes @ 0x8
   489                           
   490  0078                     GET_ADC_DATA@AN_CH:	
   491                           ; 1 bytes @ 0x8
   492                           
   493  0078                     chrg_ModeCheck@ch_i:	
   494                           ; 1 bytes @ 0x8
   495                           
   496  0078                     GLO_cdsCheckFuc@m_adpre:	
   497                           ; 1 bytes @ 0x8
   498                           
   499                           
   500                           ; 1 bytes @ 0x8
   501  0078                     	ds	1
   502  0079                     ??_main:	
   503  0079                     main@main_i:	
   504                           ; 1 bytes @ 0x9
   505                           
   506                           
   507                           ; 1 bytes @ 0x9
   508  0079                     	ds	1
   509                           
   510                           	psect	cstackBANK0
   511  0020                     __pcstackBANK0:	
   512  0020                     ?___lwdiv:	
   513  0020                     AD_baseWriteFuc@ad_cl:	
   514                           ; 2 bytes @ 0x0
   515                           
   516  0020                     ___lwdiv@divisor:	
   517                           ; 1 bytes @ 0x0
   518                           
   519                           
   520                           ; 2 bytes @ 0x0
   521  0020                     	ds	1
   522  0021                     AD_baseWriteFuc@ad_ch:	
   523                           
   524                           ; 1 bytes @ 0x1
   525  0021                     	ds	1
   526  0022                     AD_baseWriteFuc@ad_vl:	
   527  0022                     ___lwdiv@dividend:	
   528                           ; 1 bytes @ 0x2
   529                           
   530                           
   531                           ; 2 bytes @ 0x2
   532  0022                     	ds	1
   533  0023                     AD_baseWriteFuc@ad_vh:	
   534                           
   535                           ; 1 bytes @ 0x3
   536  0023                     	ds	1
   537  0024                     ___lwdiv@counter:	
   538                           
   539                           ; 1 bytes @ 0x4
   540  0024                     	ds	1
   541  0025                     ___lwdiv@quotient:	
   542                           
   543                           ; 2 bytes @ 0x5
   544  0025                     	ds	2
   545  0027                     ??_Sola_checkFuc:	
   546  0027                     ??_Solar_BaseDefine:	
   547                           ; 1 bytes @ 0x7
   548                           
   549                           
   550                           ; 1 bytes @ 0x7
   551  0027                     	ds	4
   552  002B                     Sola_checkFuc@ad_total:	
   553  002B                     Solar_BaseDefine@ad_total:	
   554                           ; 20 bytes @ 0xB
   555                           
   556                           
   557                           ; 20 bytes @ 0xB
   558  002B                     	ds	20
   559  003F                     Sola_checkFuc@z:	
   560  003F                     Solar_BaseDefine@define_t:	
   561                           ; 1 bytes @ 0x1F
   562                           
   563                           
   564                           ; 1 bytes @ 0x1F
   565  003F                     	ds	1
   566  0040                     Sola_checkFuc@ad_sum:	
   567  0040                     Solar_BaseDefine@ad_sum:	
   568                           ; 2 bytes @ 0x20
   569                           
   570                           
   571                           ; 2 bytes @ 0x20
   572  0040                     	ds	2
   573  0042                     Sola_checkFuc@ad_v:	
   574  0042                     Solar_BaseDefine@ad_v:	
   575                           ; 2 bytes @ 0x22
   576                           
   577                           
   578                           ; 2 bytes @ 0x22
   579  0042                     	ds	2
   580  0044                     Sola_checkFuc@j:	
   581  0044                     Solar_BaseDefine@j:	
   582                           ; 1 bytes @ 0x24
   583                           
   584                           
   585                           ; 1 bytes @ 0x24
   586  0044                     	ds	1
   587  0045                     Sola_checkFuc@i:	
   588  0045                     Solar_BaseDefine@i:	
   589                           ; 1 bytes @ 0x25
   590                           
   591                           
   592                           ; 1 bytes @ 0x25
   593  0045                     	ds	1
   594                           
   595                           	psect	maintext
   596  031C                     __pmaintext:	
   597 ;;
   598 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   599 ;;
   600 ;; *************** function _main *****************
   601 ;; Defined at:
   602 ;;		line 1923 in file "main.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;		None
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  main_i          1    9[COMMON] unsigned char 
   607 ;;  main_j          1    0        unsigned char 
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : B00/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMMON   BANK0   BANK1
   617 ;;      Params:         0       0       0
   618 ;;      Locals:         1       0       0
   619 ;;      Temps:          0       0       0
   620 ;;      Totals:         1       0       0
   621 ;;Total ram usage:        1 bytes
   622 ;; Hardware stack levels required when called:    5
   623 ;; This function calls:
   624 ;;		_ADC_INITIAL
   625 ;;		_AD_baseGetFuc
   626 ;;		_DelayMs
   627 ;;		_EEPROM_Init
   628 ;;		_Event_checkFuc
   629 ;;		_GLO_cdsCheckFuc
   630 ;;		_INT_INITIAL
   631 ;;		_Mode_changeCheckFuc
   632 ;;		_POWER_INITIAL
   633 ;;		_Sola_checkFuc
   634 ;;		_Solar_BaseDefine
   635 ;;		_TestFunc_Disable
   636 ;;		_TestFunc_Enable
   637 ;;		_Version_Write
   638 ;;		_WDT_INITIAL
   639 ;;		___lwdiv
   640 ;;		___wmul
   641 ;;		_chrg_ModeCheck
   642 ;; This function is called by:
   643 ;;		Startup code after reset
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           
   648                           ;psect for function _main
   649  031C                     _main:	
   650                           
   651                           ;main.c: 1926: unsigned char main_j = 0;
   652                           
   653                           ;incstack = 0
   654                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   655  031C  01F9               	clrf	main@main_i
   656                           
   657                           ;main.c: 1930: POWER_INITIAL();
   658  031D  2571               	fcall	_POWER_INITIAL
   659                           
   660                           ;main.c: 1932: ADC_INITIAL();
   661  031E  262A               	fcall	_ADC_INITIAL
   662                           
   663                           ;main.c: 1933: WDT_INITIAL();
   664  031F  2607               	fcall	_WDT_INITIAL
   665                           
   666                           ;main.c: 1934: INT_INITIAL();
   667  0320  25F3               	fcall	_INT_INITIAL
   668                           
   669                           ;main.c: 1935: EEPROM_Init();
   670  0321  2539               	fcall	_EEPROM_Init
   671                           
   672                           ;main.c: 1936: Version_Write();
   673  0322  24FD               	fcall	_Version_Write
   674                           
   675                           ;main.c: 1942: PC5 = 0;
   676  0323  1283               	bcf	3,5	;RP0=0, select bank0
   677  0324  1303               	bcf	3,6	;RP1=0, select bank0
   678  0325  1287               	bcf	7,5	;volatile
   679                           
   680                           ;main.c: 1943: PA6 = 0;
   681  0326  1305               	bcf	5,6	;volatile
   682  0327  1683               	bsf	3,5	;RP0=1, select bank1
   683  0328  1187               	bcf	7,3	;volatile
   684  0329  1283               	bcf	3,5	;RP0=0, select bank0
   685  032A  1187               	bcf	7,3	;volatile
   686                           
   687                           ;main.c: 1946: DelayMs(250);
   688  032B  30FA               	movlw	250
   689  032C  25B9               	fcall	_DelayMs
   690                           
   691                           ;main.c: 1947: DelayMs(250);
   692  032D  30FA               	movlw	250
   693  032E  25B9               	fcall	_DelayMs
   694                           
   695                           ;main.c: 1948: DelayMs(250);
   696  032F  30FA               	movlw	250
   697  0330  25B9               	fcall	_DelayMs
   698                           
   699                           ;main.c: 1949: DelayMs(250);
   700  0331  30FA               	movlw	250
   701  0332  25B9               	fcall	_DelayMs
   702                           
   703                           ;main.c: 1952: TestFunc_Enable();
   704  0333  2632               	fcall	_TestFunc_Enable
   705                           
   706                           ;main.c: 1954: if(!PA2 && !PA4 && !PA3)
   707  0334  1283               	bcf	3,5	;RP0=0, select bank0
   708  0335  1D05               	btfss	5,2	;volatile
   709  0336  1A05               	btfsc	5,4	;volatile
   710  0337  2B4E               	goto	l4550
   711  0338  1985               	btfsc	5,3	;volatile
   712  0339  2B4E               	goto	l4550
   713                           
   714                           ;main.c: 1955: {
   715                           ;main.c: 1956: DelayMs(100);
   716  033A  3064               	movlw	100
   717  033B  25B9               	fcall	_DelayMs
   718                           
   719                           ;main.c: 1958: if(!PA2 && !PA4 && !PA3)
   720  033C  1283               	bcf	3,5	;RP0=0, select bank0
   721  033D  1303               	bcf	3,6	;RP1=0, select bank0
   722  033E  1D05               	btfss	5,2	;volatile
   723  033F  1A05               	btfsc	5,4	;volatile
   724  0340  2B4E               	goto	l4550
   725  0341  1985               	btfsc	5,3	;volatile
   726  0342  2B4E               	goto	l4550
   727                           
   728                           ;main.c: 1959: {
   729                           ;main.c: 1962: DelayMs(250);
   730  0343  30FA               	movlw	250
   731  0344  25B9               	fcall	_DelayMs
   732                           
   733                           ;main.c: 1963: DelayMs(250);
   734  0345  30FA               	movlw	250
   735  0346  25B9               	fcall	_DelayMs
   736                           
   737                           ;main.c: 1964: DelayMs(250);
   738  0347  30FA               	movlw	250
   739  0348  25B9               	fcall	_DelayMs
   740                           
   741                           ;main.c: 1965: DelayMs(250);
   742  0349  30FA               	movlw	250
   743  034A  25B9               	fcall	_DelayMs
   744                           
   745                           ;main.c: 1967: Solar_BaseDefine();
   746  034B  2159               	fcall	_Solar_BaseDefine
   747  034C                     l1502:	
   748                           ;main.c: 1971: while(1)
   749                           
   750  034C  0064               	clrwdt	;# 
   751  034D  2B4C               	goto	l1502
   752  034E                     l4550:	
   753                           
   754                           ;main.c: 1975: }
   755                           ;main.c: 1976: }
   756                           ;main.c: 1978: TestFunc_Disable();
   757  034E  2642               	fcall	_TestFunc_Disable
   758                           
   759                           ;main.c: 1981: PA6 = 1;
   760  034F  1705               	bsf	5,6	;volatile
   761                           
   762                           ;main.c: 1982: DelayMs(200);
   763  0350  30C8               	movlw	200
   764  0351  25B9               	fcall	_DelayMs
   765                           
   766                           ;main.c: 1983: DelayMs(200);
   767  0352  30C8               	movlw	200
   768  0353  25B9               	fcall	_DelayMs
   769                           
   770                           ;main.c: 1984: PA6 = 0;
   771  0354  1283               	bcf	3,5	;RP0=0, select bank0
   772  0355  1303               	bcf	3,6	;RP1=0, select bank0
   773  0356  1305               	bcf	5,6	;volatile
   774                           
   775                           ;main.c: 1985: DelayMs(200);
   776  0357  30C8               	movlw	200
   777  0358  25B9               	fcall	_DelayMs
   778                           
   779                           ;main.c: 1986: DelayMs(200);
   780  0359  30C8               	movlw	200
   781  035A  25B9               	fcall	_DelayMs
   782                           
   783                           ;main.c: 1987: DelayMs(200);
   784  035B  30C8               	movlw	200
   785  035C  25B9               	fcall	_DelayMs
   786                           
   787                           ;main.c: 1988: PA6 = 1;
   788  035D  1283               	bcf	3,5	;RP0=0, select bank0
   789  035E  1303               	bcf	3,6	;RP1=0, select bank0
   790  035F  1705               	bsf	5,6	;volatile
   791                           
   792                           ;main.c: 1989: DelayMs(200);
   793  0360  30C8               	movlw	200
   794  0361  25B9               	fcall	_DelayMs
   795                           
   796                           ;main.c: 1990: DelayMs(200);
   797  0362  30C8               	movlw	200
   798  0363  25B9               	fcall	_DelayMs
   799                           
   800                           ;main.c: 1991: PA6 = 0;
   801  0364  1283               	bcf	3,5	;RP0=0, select bank0
   802  0365  1303               	bcf	3,6	;RP1=0, select bank0
   803  0366  1305               	bcf	5,6	;volatile
   804                           
   805                           ;main.c: 2025: if(AD_baseGetFuc() == 0)
   806  0367  251B               	fcall	_AD_baseGetFuc
   807  0368  3A00               	xorlw	0
   808  0369  1D03               	skipz
   809  036A  2B6C               	goto	l1505
   810                           
   811                           ;main.c: 2026: AD_baseGetFuc();
   812  036B  251B               	fcall	_AD_baseGetFuc
   813  036C                     l1505:	
   814                           
   815                           ;main.c: 2030: g_gloRecValue = (g_adBaseValue * 13)/10;
   816  036C  300A               	movlw	10
   817  036D  1283               	bcf	3,5	;RP0=0, select bank0
   818  036E  00A0               	movwf	___lwdiv@divisor
   819  036F  01A1               	clrf	___lwdiv@divisor+1
   820  0370  0863               	movf	_g_adBaseValue+1,w	;volatile
   821  0371  00F3               	movwf	___wmul@multiplier+1
   822  0372  0862               	movf	_g_adBaseValue,w	;volatile
   823  0373  00F2               	movwf	___wmul@multiplier
   824  0374  300D               	movlw	13
   825  0375  00F4               	movwf	___wmul@multiplicand
   826  0376  01F5               	clrf	___wmul@multiplicand+1
   827  0377  258B               	fcall	___wmul
   828  0378  239E               	fcall	PL26	;call to abstracted procedure
   829  0379  2462               	fcall	___lwdiv
   830  037A  0821               	movf	?___lwdiv+1,w
   831  037B  00E1               	movwf	_g_gloRecValue+1	;volatile
   832  037C  0820               	movf	?___lwdiv,w
   833  037D  00E0               	movwf	_g_gloRecValue	;volatile
   834                           
   835                           ;main.c: 2031: g_cdsCmp = g_gloRecValue-g_adBaseValue;
   836  037E  0862               	movf	_g_adBaseValue,w	;volatile
   837  037F  0260               	subwf	_g_gloRecValue,w	;volatile
   838  0380  00E6               	movwf	_g_cdsCmp	;volatile
   839  0381                     l1506:	
   840                           ;main.c: 2035: while(1)
   841                           
   842  0381  0064               	clrwdt	;# 
   843                           
   844                           ;main.c: 2038: if(g_checkMode == OFF_MODE)
   845  0382  1283               	bcf	3,5	;RP0=0, select bank0
   846  0383  1303               	bcf	3,6	;RP1=0, select bank0
   847  0384  0847               	movf	_g_checkMode,w	;volatile
   848  0385  1D03               	btfss	3,2
   849  0386  2B89               	goto	l4570
   850                           
   851                           ;main.c: 2039: {
   852                           ;main.c: 2040: main_i = chrg_ModeCheck();
   853  0387  2434               	fcall	_chrg_ModeCheck
   854  0388  00F9               	movwf	main@main_i
   855  0389                     l4570:	
   856                           
   857                           ;main.c: 2041: }
   858                           ;main.c: 2043: if(main_i != 1)
   859  0389  0379               	decf	main@main_i,w
   860  038A  1903               	btfsc	3,2
   861  038B  2B94               	goto	l4586
   862                           
   863                           ;main.c: 2044: {
   864                           ;main.c: 2046: ADON = 1;
   865  038C  141F               	bsf	31,0	;volatile
   866                           
   867                           ;main.c: 2047: DelayMs(1);
   868  038D  3001               	movlw	1
   869  038E  25B9               	fcall	_DelayMs
   870                           
   871                           ;main.c: 2049: Sola_checkFuc();
   872  038F  2240               	fcall	_Sola_checkFuc
   873                           
   874                           ;main.c: 2050: ADON = 0;
   875  0390  101F               	bcf	31,0	;volatile
   876                           
   877                           ;main.c: 2052: GLO_cdsCheckFuc();
   878  0391  23A3               	fcall	_GLO_cdsCheckFuc
   879                           
   880                           ;main.c: 2054: Mode_changeCheckFuc();
   881  0392  23FA               	fcall	_Mode_changeCheckFuc
   882                           
   883                           ;main.c: 2056: Event_checkFuc();
   884  0393  203B               	fcall	_Event_checkFuc
   885  0394                     l4586:	
   886                           
   887                           ;main.c: 2057: }
   888                           ;main.c: 2058: main_i = 0;
   889  0394  01F9               	clrf	main@main_i
   890                           
   891                           ;main.c: 2059: if((g_checkMode != OFF_MODE) || PC1)
   892  0395  1283               	bcf	3,5	;RP0=0, select bank0
   893  0396  0847               	movf	_g_checkMode,w	;volatile
   894  0397  1D03               	btfss	3,2
   895  0398  2B9B               	goto	l1511
   896  0399  1C87               	btfss	7,1	;volatile
   897  039A  2B81               	goto	l1506
   898  039B                     l1511:	
   899  039B  0064               	clrwdt	;# 
   900  039C  0063               	sleep	;# 
   901  039D  2B81               	goto	l1506
   902  039E                     __end_of_main:	
   903  039E                     PL26:	
   904  039E  0873               	movf	?___wmul+1,w
   905  039F  00A3               	movwf	___lwdiv@dividend+1
   906  03A0  0872               	movf	?___wmul,w
   907  03A1  00A2               	movwf	___lwdiv@dividend
   908  03A2  0008               	return
   909  03A3                     __end_ofPL26:	
   910                           
   911                           	psect	text1
   912  0434                     __ptext1:	
   913 ;; *************** function _chrg_ModeCheck *****************
   914 ;; Defined at:
   915 ;;		line 1112 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  ch_i            1    8[COMMON] unsigned char 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      unsigned char 
   922 ;; Registers used:
   923 ;;		wreg, status,2, status,0, pclath, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 300/0
   926 ;;		On exit  : 300/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1
   929 ;;      Params:         0       0       0
   930 ;;      Locals:         1       0       0
   931 ;;      Temps:          0       0       0
   932 ;;      Totals:         1       0       0
   933 ;;Total ram usage:        1 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    4
   936 ;; This function calls:
   937 ;;		_Charg_Disp
   938 ;;		_DelayMs
   939 ;; This function is called by:
   940 ;;		_main
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           
   945                           ;psect for function _chrg_ModeCheck
   946  0434                     _chrg_ModeCheck:	
   947                           
   948                           ;main.c: 1115: unsigned char ch_i;
   949                           ;main.c: 1118: if(!PC1)
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _chrg_ModeCheck: [wreg+status,2+status,0+pclath+cstack]
   953  0434  1887               	btfsc	7,1	;volatile
   954  0435  3400               	retlw	0
   955                           
   956                           ;main.c: 1119: {
   957                           ;main.c: 1120: DelayMs(100);
   958  0436  3064               	movlw	100
   959  0437  25B9               	fcall	_DelayMs
   960                           
   961                           ;main.c: 1121: if(!PC1)
   962  0438  1283               	bcf	3,5	;RP0=0, select bank0
   963  0439  1303               	bcf	3,6	;RP1=0, select bank0
   964  043A  1887               	btfsc	7,1	;volatile
   965  043B  3400               	retlw	0
   966  043C                     l4166:	
   967                           
   968                           ;main.c: 1125: {
   969                           ;main.c: 1126: Charg_Disp();
   970  043C  25A4               	fcall	_Charg_Disp
   971                           
   972                           ;main.c: 1128: for(ch_i = 10;ch_i--;)
   973  043D  300A               	movlw	10
   974  043E  00F8               	movwf	chrg_ModeCheck@ch_i
   975  043F  2C5E               	goto	l4200
   976  0440                     l1334:	
   977  0440  0064               	clrwdt	;# 
   978                           
   979                           ;main.c: 1131: DelayMs(100);
   980  0441  3064               	movlw	100
   981  0442  25B9               	fcall	_DelayMs
   982                           
   983                           ;main.c: 1132: if(!PA2 || !PA4 || !PA3 || PC1)
   984  0443  1283               	bcf	3,5	;RP0=0, select bank0
   985  0444  1303               	bcf	3,6	;RP1=0, select bank0
   986  0445  1905               	btfsc	5,2	;volatile
   987  0446  1E05               	btfss	5,4	;volatile
   988  0447  2C4C               	goto	l4180
   989  0448  1D85               	btfss	5,3	;volatile
   990  0449  2C4C               	goto	l4180
   991  044A  1C87               	btfss	7,1	;volatile
   992  044B  2C5E               	goto	l4200
   993  044C                     l4180:	
   994                           
   995                           ;main.c: 1133: {
   996                           ;main.c: 1134: DelayMs(100);
   997  044C  3064               	movlw	100
   998  044D  25B9               	fcall	_DelayMs
   999                           
  1000                           ;main.c: 1135: if(!PA2 || !PA4 || !PA3 || PC1)
  1001  044E  1283               	bcf	3,5	;RP0=0, select bank0
  1002  044F  1303               	bcf	3,6	;RP1=0, select bank0
  1003  0450  1905               	btfsc	5,2	;volatile
  1004  0451  1E05               	btfss	5,4	;volatile
  1005  0452  2C57               	goto	l1340
  1006  0453  1D85               	btfss	5,3	;volatile
  1007  0454  2C57               	goto	l1340
  1008  0455  1C87               	btfss	7,1	;volatile
  1009  0456  2C5E               	goto	l4200
  1010  0457                     l1340:	
  1011  0457  0064               	clrwdt	;# 
  1012                           
  1013                           ;main.c: 1138: SWDTEN = 0;
  1014  0458  1283               	bcf	3,5	;RP0=0, select bank0
  1015  0459  1303               	bcf	3,6	;RP1=0, select bank0
  1016  045A  1018               	bcf	24,0	;volatile
  1017                           
  1018                           ;main.c: 1139: if(PC1)
  1019  045B  1887               	btfsc	7,1	;volatile
  1020                           
  1021                           ;main.c: 1140: {
  1022                           ;main.c: 1141: return 1;
  1023  045C  3401               	retlw	1
  1024                           
  1025                           ;main.c: 1143: else
  1026                           ;main.c: 1144: {
  1027                           ;main.c: 1145: return 2;
  1028  045D  3402               	retlw	2
  1029  045E                     l4200:	
  1030  045E  03F8               	decf	chrg_ModeCheck@ch_i,f
  1031  045F  0F78               	incfsz	chrg_ModeCheck@ch_i,w
  1032  0460  2C40               	goto	l1334
  1033  0461  2C3C               	goto	l4166
  1034  0462                     __end_of_chrg_ModeCheck:	
  1035                           ;main.c: 1146: }
  1036                           ;main.c: 1147: }
  1037                           ;main.c: 1148: }
  1038                           ;main.c: 1149: }
  1039                           ;main.c: 1150: }
  1040                           ;main.c: 1151: }
  1041                           ;main.c: 1152: }
  1042                           ;main.c: 1153: return 0;
  1043                           
  1044                           
  1045                           	psect	text2
  1046  05A4                     __ptext2:	
  1047 ;; *************** function _Charg_Disp *****************
  1048 ;; Defined at:
  1049 ;;		line 403 in file "main.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  chg_t           1    7[COMMON] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0, pclath, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0   BANK1
  1063 ;;      Params:         0       0       0
  1064 ;;      Locals:         1       0       0
  1065 ;;      Temps:          0       0       0
  1066 ;;      Totals:         1       0       0
  1067 ;;Total ram usage:        1 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; Hardware stack levels required when called:    3
  1070 ;; This function calls:
  1071 ;;		_DelayMs
  1072 ;; This function is called by:
  1073 ;;		_chrg_ModeCheck
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           
  1078                           ;psect for function _Charg_Disp
  1079  05A4                     _Charg_Disp:	
  1080                           
  1081                           ;main.c: 405: unsigned char chg_t;
  1082                           ;main.c: 406: PC5 = 0;
  1083                           
  1084                           ;incstack = 0
  1085                           ; Regs used in _Charg_Disp: [wreg+status,2+status,0+pclath+cstack]
  1086  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1087  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1088  05A6  1287               	bcf	7,5	;volatile
  1089                           
  1090                           ;main.c: 408: chg_t = 150;
  1091  05A7  3096               	movlw	150
  1092  05A8  00F7               	movwf	Charg_Disp@chg_t
  1093  05A9                     l3746:	
  1094                           ;main.c: 409: while(chg_t--)
  1095                           
  1096  05A9  03F7               	decf	Charg_Disp@chg_t,f
  1097  05AA  0F77               	incfsz	Charg_Disp@chg_t,w
  1098  05AB  2DAD               	goto	l1120
  1099  05AC  0008               	return
  1100  05AD                     l1120:	
  1101  05AD  0064               	clrwdt	;# 
  1102                           
  1103                           ;main.c: 412: PA6 = 1;
  1104  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  1105  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  1106  05B0  1705               	bsf	5,6	;volatile
  1107                           
  1108                           ;main.c: 413: DelayMs(3);
  1109  05B1  3003               	movlw	3
  1110  05B2  25B9               	fcall	_DelayMs
  1111                           
  1112                           ;main.c: 414: PA6 = 0;
  1113  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1114  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1115  05B5  1305               	bcf	5,6	;volatile
  1116                           
  1117                           ;main.c: 415: DelayMs(7);
  1118  05B6  3007               	movlw	7
  1119  05B7  25B9               	fcall	_DelayMs
  1120  05B8  2DA9               	goto	l3746
  1121  05B9                     __end_of_Charg_Disp:	
  1122                           
  1123                           	psect	text3
  1124  04FD                     __ptext3:	
  1125 ;; *************** function _Version_Write *****************
  1126 ;; Defined at:
  1127 ;;		line 1583 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  D_d             1    6[COMMON] unsigned char 
  1132 ;;  V_d             1    5[COMMON] unsigned char 
  1133 ;;  D_rd            1    0        unsigned char 
  1134 ;;  V_rd            1    0        unsigned char 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, status,2, status,0, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/100
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1
  1144 ;;      Params:         0       0       0
  1145 ;;      Locals:         2       0       0
  1146 ;;      Temps:          0       0       0
  1147 ;;      Totals:         2       0       0
  1148 ;;Total ram usage:        2 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    2
  1151 ;; This function calls:
  1152 ;;		_EEPROMread
  1153 ;;		_EEPROMwrite
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           
  1160                           ;psect for function _Version_Write
  1161  04FD                     _Version_Write:	
  1162                           
  1163                           ;main.c: 1585: unsigned char V_d, D_d,V_rd, D_rd;
  1164                           ;main.c: 1589: EEPROMwrite(0x01, 0x84);
  1165                           
  1166                           ;incstack = 0
  1167                           ; Regs used in _Version_Write: [wreg+status,2+status,0+pclath+cstack]
  1168  04FD  3084               	movlw	132
  1169  04FE  00F2               	movwf	EEPROMwrite@Data
  1170  04FF  3001               	movlw	1
  1171  0500  2555               	fcall	_EEPROMwrite
  1172                           
  1173                           ;main.c: 1590: EEPROMwrite(0x02, 0x10);
  1174  0501  3010               	movlw	16
  1175  0502  00F2               	movwf	EEPROMwrite@Data
  1176  0503  3002               	movlw	2
  1177  0504  2555               	fcall	_EEPROMwrite
  1178                           
  1179                           ;main.c: 1593: V_d = EEPROMread(0x01);
  1180  0505  3001               	movlw	1
  1181  0506  2619               	fcall	_EEPROMread
  1182  0507  00F5               	movwf	Version_Write@V_d
  1183                           
  1184                           ;main.c: 1594: D_d = EEPROMread(0x02);
  1185  0508  3002               	movlw	2
  1186  0509  2619               	fcall	_EEPROMread
  1187  050A  00F6               	movwf	Version_Write@D_d
  1188                           
  1189                           ;main.c: 1596: if((V_d != 0x84) || (D_d != 0x10))
  1190  050B  3084               	movlw	132
  1191  050C  0675               	xorwf	Version_Write@V_d,w
  1192  050D  1D03               	btfss	3,2
  1193  050E  2D13               	goto	l4382
  1194  050F  3010               	movlw	16
  1195  0510  0676               	xorwf	Version_Write@D_d,w
  1196  0511  1903               	btfsc	3,2
  1197  0512  0008               	return
  1198  0513                     l4382:	
  1199                           
  1200                           ;main.c: 1597: {
  1201                           ;main.c: 1598: EEPROMwrite(0x01, 0x84);
  1202  0513  3084               	movlw	132
  1203  0514  00F2               	movwf	EEPROMwrite@Data
  1204  0515  3001               	movlw	1
  1205  0516  2555               	fcall	_EEPROMwrite
  1206                           
  1207                           ;main.c: 1599: EEPROMwrite(0x02, 0x10);
  1208  0517  3010               	movlw	16
  1209  0518  00F2               	movwf	EEPROMwrite@Data
  1210  0519  3002               	movlw	2
  1211  051A  2D55               	ljmp	_EEPROMwrite
  1212  051B                     __end_of_Version_Write:	
  1213                           
  1214                           	psect	text4
  1215  0632                     __ptext4:	
  1216 ;; *************** function _TestFunc_Enable *****************
  1217 ;; Defined at:
  1218 ;;		line 1863 in file "main.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 300/100
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1
  1232 ;;      Params:         0       0       0
  1233 ;;      Locals:         0       0       0
  1234 ;;      Temps:          0       0       0
  1235 ;;      Totals:         0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    1
  1239 ;; This function calls:
  1240 ;;		Nothing
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _TestFunc_Enable
  1248  0632                     _TestFunc_Enable:	
  1249                           
  1250                           ;incstack = 0
  1251                           ; Regs used in _TestFunc_Enable: [wreg+status,2+status,0]
  1252                           ;main.c: 1876: do{TRISA |= 0B00011100;WPUA |= 0B00011100;}while(0);;
  1253  0632  301C               	movlw	28
  1254  0633  1683               	bsf	3,5	;RP0=1, select bank1
  1255  0634  1303               	bcf	3,6	;RP1=0, select bank1
  1256  0635  0485               	iorwf	5,f	;volatile
  1257  0636  0495               	iorwf	21,f	;volatile
  1258  0637  0008               	return
  1259  0638                     __end_of_TestFunc_Enable:	
  1260                           
  1261                           	psect	text5
  1262  0642                     __ptext5:	
  1263 ;; *************** function _TestFunc_Disable *****************
  1264 ;; Defined at:
  1265 ;;		line 1891 in file "main.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0
  1274 ;; Tracked objects:
  1275 ;;		On entry : 300/0
  1276 ;;		On exit  : 300/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMMON   BANK0   BANK1
  1279 ;;      Params:         0       0       0
  1280 ;;      Locals:         0       0       0
  1281 ;;      Temps:          0       0       0
  1282 ;;      Totals:         0       0       0
  1283 ;;Total ram usage:        0 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    1
  1286 ;; This function calls:
  1287 ;;		Nothing
  1288 ;; This function is called by:
  1289 ;;		_main
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           
  1294                           ;psect for function _TestFunc_Disable
  1295  0642                     _TestFunc_Disable:	
  1296                           
  1297                           ;incstack = 0
  1298                           ; Regs used in _TestFunc_Disable: [wreg+status,2+status,0]
  1299                           ;main.c: 1907: do{TRISA &= 0B11100011;PORTA &= 0B11100011;}while(0);;
  1300  0642  2C2E               	ljmp	PL2	;call to abstracted procedure
  1301  0643                     __end_of_TestFunc_Disable:	
  1302                           
  1303                           	psect	text6
  1304  0159                     __ptext6:	
  1305 ;; *************** function _Solar_BaseDefine *****************
  1306 ;; Defined at:
  1307 ;;		line 1375 in file "main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  ad_total       20   11[BANK0 ] unsigned int [10]
  1312 ;;  ad_v            2   34[BANK0 ] unsigned int 
  1313 ;;  ad_sum          2   32[BANK0 ] unsigned int 
  1314 ;;  i               1   37[BANK0 ] unsigned char 
  1315 ;;  j               1   36[BANK0 ] unsigned char 
  1316 ;;  define_t        1   31[BANK0 ] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 300/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1
  1326 ;;      Params:         0       0       0
  1327 ;;      Locals:         0      27       0
  1328 ;;      Temps:          0       4       0
  1329 ;;      Totals:         0      31       0
  1330 ;;Total ram usage:       31 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:    4
  1333 ;; This function calls:
  1334 ;;		_AD_baseWriteFuc
  1335 ;;		_DelayMs
  1336 ;;		_GET_ADC_DATA
  1337 ;;		___lwdiv
  1338 ;;		_oneGLO
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _Solar_BaseDefine
  1346  0159                     _Solar_BaseDefine:	
  1347                           
  1348                           ;main.c: 1378: unsigned char define_t,i,j;
  1349                           ;main.c: 1379: unsigned int ad_v,ad_total[10],ad_sum;
  1350                           ;main.c: 1381: static unsigned int ad_vpre = 0;
  1351                           ;main.c: 1385: ADON = 1;
  1352                           
  1353                           ;incstack = 0
  1354                           ; Regs used in _Solar_BaseDefine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1355  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1356  015A  1303               	bcf	3,6	;RP1=0, select bank0
  1357  015B  141F               	bsf	31,0	;volatile
  1358                           
  1359                           ;main.c: 1386: DelayMs(100);
  1360  015C  3064               	movlw	100
  1361  015D  25B9               	fcall	_DelayMs
  1362                           
  1363                           ;main.c: 1388: for(define_t = 50;define_t--;)
  1364  015E  3032               	movlw	50
  1365  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1366  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1367  0161  00BF               	movwf	Solar_BaseDefine@define_t
  1368  0162  2A0E               	goto	l4352
  1369  0163                     l1391:	
  1370  0163  0064               	clrwdt	;# 
  1371                           
  1372                           ;main.c: 1392: ad_sum = 0;
  1373  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0166  01C0               	clrf	Solar_BaseDefine@ad_sum
  1376  0167  01C1               	clrf	Solar_BaseDefine@ad_sum+1
  1377                           
  1378                           ;main.c: 1393: for(i = 0;i < 10;i++)
  1379  0168  01C5               	clrf	Solar_BaseDefine@i
  1380  0169                     l4316:	
  1381                           
  1382                           ;main.c: 1394: {
  1383                           ;main.c: 1395: ad_total[i] = GET_ADC_DATA (0);
  1384  0169  3000               	movlw	0
  1385  016A  24B4               	fcall	_GET_ADC_DATA
  1386  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1387  016C  1003               	clrc
  1388  016D  0D45               	rlf	Solar_BaseDefine@i,w
  1389  016E  3E2B               	addlw	(low (Solar_BaseDefine@ad_total| 0))& (0+255)
  1390                           
  1391                           ;main.c: 1396: ad_sum += ad_total[i];
  1392  016F  2222               	fcall	PL6	;call to abstracted procedure
  1393  0170  0D45               	rlf	Solar_BaseDefine@i,w
  1394  0171  222B               	fcall	PL8	;call to abstracted procedure
  1395  0172  2239               	fcall	PL18	;call to abstracted procedure
  1396  0173  300A               	movlw	10
  1397  0174  0AC5               	incf	Solar_BaseDefine@i,f
  1398  0175  0245               	subwf	Solar_BaseDefine@i,w
  1399  0176  1C03               	skipc
  1400  0177  2969               	goto	l4316
  1401                           
  1402                           ;main.c: 1397: }
  1403                           ;main.c: 1399: for(i = 1;i < 10;i++)
  1404  0178  01C5               	clrf	Solar_BaseDefine@i
  1405  0179  0AC5               	incf	Solar_BaseDefine@i,f
  1406  017A                     l4328:	
  1407                           
  1408                           ;main.c: 1400: {
  1409                           ;main.c: 1401: for(j=0;j<10-i;j++)
  1410  017A  01C4               	clrf	Solar_BaseDefine@j
  1411  017B                     l4336:	
  1412  017B  01A8               	clrf	??_Solar_BaseDefine+1
  1413  017C  0845               	movf	Solar_BaseDefine@i,w
  1414  017D  3C0A               	sublw	10
  1415  017E  00A7               	movwf	??_Solar_BaseDefine
  1416  017F  1C03               	skipc
  1417  0180  03A8               	decf	??_Solar_BaseDefine+1,f
  1418  0181  0828               	movf	??_Solar_BaseDefine+1,w
  1419  0182  3A80               	xorlw	128
  1420  0183  3C80               	sublw	128
  1421  0184  1D03               	skipz
  1422  0185  2988               	goto	u3495
  1423  0186  0827               	movf	??_Solar_BaseDefine,w
  1424  0187  0244               	subwf	Solar_BaseDefine@j,w
  1425  0188                     u3495:	
  1426  0188  1803               	btfsc	3,0
  1427  0189  29C5               	goto	l1399
  1428                           
  1429                           ;main.c: 1402: {
  1430                           ;main.c: 1403: if(ad_total[j]> ad_total[j+1])
  1431  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1432  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1433  018C  1003               	clrc
  1434  018D  0D44               	rlf	Solar_BaseDefine@j,w
  1435  018E  3E2B               	addlw	(low (Solar_BaseDefine@ad_total| 0))& (0+255)
  1436  018F  0084               	movwf	4
  1437  0190  1383               	bcf	3,7	;select IRP bank0
  1438  0191  0800               	movf	0,w
  1439  0192  00A7               	movwf	??_Solar_BaseDefine
  1440  0193  0A84               	incf	4,f
  1441  0194  0800               	movf	0,w
  1442  0195  00A8               	movwf	??_Solar_BaseDefine+1
  1443  0196  2233               	fcall	PL14	;call to abstracted procedure
  1444  0197  0800               	movf	0,w
  1445  0198  00A9               	movwf	??_Solar_BaseDefine+2
  1446  0199  0A84               	incf	4,f
  1447  019A  0800               	movf	0,w
  1448  019B  00AA               	movwf	??_Solar_BaseDefine+3
  1449  019C  0828               	movf	??_Solar_BaseDefine+1,w
  1450  019D  022A               	subwf	??_Solar_BaseDefine+3,w
  1451  019E  1D03               	skipz
  1452  019F  29A2               	goto	u3485
  1453  01A0  0827               	movf	??_Solar_BaseDefine,w
  1454  01A1  0229               	subwf	??_Solar_BaseDefine+2,w
  1455  01A2                     u3485:	
  1456  01A2  1803               	skipnc
  1457  01A3  29C0               	goto	l1398
  1458                           
  1459                           ;main.c: 1404: {
  1460                           ;main.c: 1405: ad_v = ad_total[j];
  1461  01A4  1003               	clrc
  1462  01A5  0D44               	rlf	Solar_BaseDefine@j,w
  1463  01A6  3E2B               	addlw	(low (Solar_BaseDefine@ad_total| 0))& (0+255)
  1464  01A7  0084               	movwf	4
  1465  01A8  0800               	movf	0,w
  1466  01A9  00C2               	movwf	Solar_BaseDefine@ad_v
  1467  01AA  0A84               	incf	4,f
  1468  01AB  0800               	movf	0,w
  1469  01AC  00C3               	movwf	Solar_BaseDefine@ad_v+1
  1470                           
  1471                           ;main.c: 1406: ad_total[j]=ad_total[j+1];
  1472  01AD  1003               	clrc
  1473  01AE  0D44               	rlf	Solar_BaseDefine@j,w
  1474  01AF  3E02               	addlw	2
  1475  01B0  222B               	fcall	PL8	;call to abstracted procedure
  1476  01B1  1003               	clrc
  1477  01B2  0D44               	rlf	Solar_BaseDefine@j,w
  1478  01B3  3E2B               	addlw	(low (Solar_BaseDefine@ad_total| 0))& (0+255)
  1479  01B4  0084               	movwf	4
  1480  01B5  0827               	movf	??_Solar_BaseDefine,w
  1481  01B6  0080               	movwf	0
  1482  01B7  0A84               	incf	4,f
  1483  01B8  0828               	movf	??_Solar_BaseDefine+1,w
  1484  01B9  0080               	movwf	0
  1485                           
  1486                           ;main.c: 1407: ad_total[j+1] = ad_v;
  1487  01BA  2233               	fcall	PL14	;call to abstracted procedure
  1488  01BB  0842               	movf	Solar_BaseDefine@ad_v,w
  1489  01BC  0080               	movwf	0
  1490  01BD  0A84               	incf	4,f
  1491  01BE  0843               	movf	Solar_BaseDefine@ad_v+1,w
  1492  01BF  0080               	movwf	0
  1493  01C0                     l1398:	
  1494  01C0  0064               	clrwdt	;# 
  1495  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1496  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1497  01C3  0AC4               	incf	Solar_BaseDefine@j,f
  1498  01C4  297B               	goto	l4336
  1499  01C5                     l1399:	
  1500  01C5  0064               	clrwdt	;# 
  1501  01C6  300A               	movlw	10
  1502  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1503  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1504  01C9  0AC5               	incf	Solar_BaseDefine@i,f
  1505  01CA  0245               	subwf	Solar_BaseDefine@i,w
  1506  01CB  1C03               	skipc
  1507  01CC  297A               	goto	l4328
  1508                           
  1509                           ;main.c: 1412: }
  1510                           ;main.c: 1413: ad_sum = ad_sum - ad_total[0] - ad_total[9];
  1511  01CD  082B               	movf	Solar_BaseDefine@ad_total,w
  1512  01CE  073D               	addwf	Solar_BaseDefine@ad_total+18,w
  1513  01CF  00A7               	movwf	??_Solar_BaseDefine
  1514  01D0  082C               	movf	Solar_BaseDefine@ad_total+1,w
  1515  01D1  1803               	skipnc
  1516  01D2  0A2C               	incf	Solar_BaseDefine@ad_total+1,w
  1517  01D3  073E               	addwf	Solar_BaseDefine@ad_total+19,w
  1518  01D4  00A8               	movwf	??_Solar_BaseDefine+1
  1519  01D5  09A7               	comf	??_Solar_BaseDefine,f
  1520  01D6  09A8               	comf	??_Solar_BaseDefine+1,f
  1521  01D7  0AA7               	incf	??_Solar_BaseDefine,f
  1522  01D8  1903               	skipnz
  1523  01D9  0AA8               	incf	??_Solar_BaseDefine+1,f
  1524  01DA  2239               	fcall	PL18	;call to abstracted procedure
  1525                           
  1526                           ;main.c: 1414: ad_sum >>= 3;
  1527  01DB  1003               	clrc
  1528  01DC  0CC1               	rrf	Solar_BaseDefine@ad_sum+1,f
  1529  01DD  0CC0               	rrf	Solar_BaseDefine@ad_sum,f
  1530  01DE  1003               	clrc
  1531  01DF  0CC1               	rrf	Solar_BaseDefine@ad_sum+1,f
  1532  01E0  0CC0               	rrf	Solar_BaseDefine@ad_sum,f
  1533  01E1  1003               	clrc
  1534  01E2  0CC1               	rrf	Solar_BaseDefine@ad_sum+1,f
  1535  01E3  0CC0               	rrf	Solar_BaseDefine@ad_sum,f
  1536                           
  1537                           ;main.c: 1416: ad_v = 2 * ad_sum + (10 - 2)*ad_vpre;
  1538  01E4  0841               	movf	Solar_BaseDefine@ad_sum+1,w
  1539  01E5  00C3               	movwf	Solar_BaseDefine@ad_v+1
  1540  01E6  0840               	movf	Solar_BaseDefine@ad_sum,w
  1541  01E7  00C2               	movwf	Solar_BaseDefine@ad_v
  1542  01E8  1003               	clrc
  1543  01E9  0DC2               	rlf	Solar_BaseDefine@ad_v,f
  1544  01EA  0DC3               	rlf	Solar_BaseDefine@ad_v+1,f
  1545  01EB  085B               	movf	Solar_BaseDefine@ad_vpre+1,w
  1546  01EC  00A8               	movwf	??_Solar_BaseDefine+1
  1547  01ED  085A               	movf	Solar_BaseDefine@ad_vpre,w
  1548  01EE  00A7               	movwf	??_Solar_BaseDefine
  1549  01EF  1003               	clrc
  1550  01F0  0DA7               	rlf	??_Solar_BaseDefine,f
  1551  01F1  0DA8               	rlf	??_Solar_BaseDefine+1,f
  1552  01F2  1003               	clrc
  1553  01F3  0DA7               	rlf	??_Solar_BaseDefine,f
  1554  01F4  0DA8               	rlf	??_Solar_BaseDefine+1,f
  1555  01F5  1003               	clrc
  1556  01F6  0DA7               	rlf	??_Solar_BaseDefine,f
  1557  01F7  0DA8               	rlf	??_Solar_BaseDefine+1,f
  1558  01F8  0827               	movf	??_Solar_BaseDefine,w
  1559  01F9  07C2               	addwf	Solar_BaseDefine@ad_v,f
  1560  01FA  1803               	skipnc
  1561  01FB  0AC3               	incf	Solar_BaseDefine@ad_v+1,f
  1562  01FC  0828               	movf	??_Solar_BaseDefine+1,w
  1563  01FD  07C3               	addwf	Solar_BaseDefine@ad_v+1,f
  1564                           
  1565                           ;main.c: 1417: ad_v = ad_v/10;
  1566  01FE  300A               	movlw	10
  1567  01FF  00A0               	movwf	___lwdiv@divisor
  1568  0200  01A1               	clrf	___lwdiv@divisor+1
  1569  0201  0843               	movf	Solar_BaseDefine@ad_v+1,w
  1570  0202  00A3               	movwf	___lwdiv@dividend+1
  1571  0203  0842               	movf	Solar_BaseDefine@ad_v,w
  1572  0204  00A2               	movwf	___lwdiv@dividend
  1573  0205  2462               	fcall	___lwdiv
  1574  0206  0821               	movf	?___lwdiv+1,w
  1575  0207  00C3               	movwf	Solar_BaseDefine@ad_v+1
  1576  0208  0820               	movf	?___lwdiv,w
  1577  0209  00C2               	movwf	Solar_BaseDefine@ad_v
  1578                           
  1579                           ;main.c: 1418: ad_vpre = ad_v;
  1580  020A  0843               	movf	Solar_BaseDefine@ad_v+1,w
  1581  020B  00DB               	movwf	Solar_BaseDefine@ad_vpre+1
  1582  020C  0842               	movf	Solar_BaseDefine@ad_v,w
  1583  020D  00DA               	movwf	Solar_BaseDefine@ad_vpre
  1584  020E                     l4352:	
  1585  020E  03BF               	decf	Solar_BaseDefine@define_t,f
  1586  020F  0F3F               	incfsz	Solar_BaseDefine@define_t,w
  1587  0210  2963               	goto	l1391
  1588                           
  1589                           ;main.c: 1419: }
  1590                           ;main.c: 1422: AD_baseWriteFuc(ad_v);
  1591  0211  0843               	movf	Solar_BaseDefine@ad_v+1,w
  1592  0212  00F6               	movwf	AD_baseWriteFuc@ad_vt+1
  1593  0213  0842               	movf	Solar_BaseDefine@ad_v,w
  1594  0214  00F5               	movwf	AD_baseWriteFuc@ad_vt
  1595  0215  24D9               	fcall	_AD_baseWriteFuc
  1596                           
  1597                           ;main.c: 1424: ADON = 0;
  1598  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0218  101F               	bcf	31,0	;volatile
  1601                           
  1602                           ;main.c: 1427: oneGLO();
  1603  0219  25E8               	fcall	_oneGLO
  1604  021A  0064               	clrwdt	;# 
  1605                           
  1606                           ;main.c: 1429: DelayMs(200);
  1607  021B  30C8               	movlw	200
  1608  021C  25B9               	fcall	_DelayMs
  1609                           
  1610                           ;main.c: 1430: oneGLO();
  1611  021D  25E8               	fcall	_oneGLO
  1612  021E  0064               	clrwdt	;# 
  1613                           
  1614                           ;main.c: 1432: DelayMs(200);
  1615  021F  30C8               	movlw	200
  1616  0220  25B9               	fcall	_DelayMs
  1617                           
  1618                           ;main.c: 1433: oneGLO();
  1619  0221  2DE8               	ljmp	l3732
  1620  0222                     __end_of_Solar_BaseDefine:	
  1621  0222                     PL6:	
  1622  0222  0084               	movwf	4
  1623  0223  0872               	movf	?_GET_ADC_DATA,w
  1624  0224  1383               	bcf	3,7	;select IRP bank0
  1625  0225  0080               	movwf	0
  1626  0226  0A84               	incf	4,f
  1627  0227  0873               	movf	?_GET_ADC_DATA+1,w
  1628  0228  0080               	movwf	0
  1629  0229  1003               	clrc
  1630  022A  0008               	return
  1631  022B                     __end_ofPL6:	
  1632  022B                     PL8:	
  1633  022B  3E2B               	addlw	(low (Solar_BaseDefine@ad_total| 0))& (0+255)
  1634  022C  0084               	movwf	4
  1635  022D  0800               	movf	0,w
  1636  022E  00A7               	movwf	??_Solar_BaseDefine
  1637  022F  0A84               	incf	4,f
  1638  0230  0800               	movf	0,w
  1639  0231  00A8               	movwf	??_Solar_BaseDefine+1
  1640  0232  0008               	return
  1641  0233                     __end_ofPL8:	
  1642  0233                     PL14:	
  1643  0233  1003               	clrc
  1644  0234  0D44               	rlf	Solar_BaseDefine@j,w
  1645  0235  3E02               	addlw	2
  1646  0236  3E2B               	addlw	(low (Solar_BaseDefine@ad_total| 0))& (0+255)
  1647  0237  0084               	movwf	4
  1648  0238  0008               	return
  1649  0239                     __end_ofPL14:	
  1650  0239                     PL18:	
  1651  0239  0827               	movf	??_Solar_BaseDefine,w
  1652  023A  07C0               	addwf	Solar_BaseDefine@ad_sum,f
  1653  023B  1803               	skipnc
  1654  023C  0AC1               	incf	Solar_BaseDefine@ad_sum+1,f
  1655  023D  0828               	movf	??_Solar_BaseDefine+1,w
  1656  023E  07C1               	addwf	Solar_BaseDefine@ad_sum+1,f
  1657  023F  0008               	return
  1658  0240                     __end_ofPL18:	
  1659                           
  1660                           	psect	text7
  1661  05E8                     __ptext7:	
  1662 ;; *************** function _oneGLO *****************
  1663 ;; Defined at:
  1664 ;;		line 393 in file "main.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0, pclath, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 300/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1
  1678 ;;      Params:         0       0       0
  1679 ;;      Locals:         0       0       0
  1680 ;;      Temps:          0       0       0
  1681 ;;      Totals:         0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    3
  1685 ;; This function calls:
  1686 ;;		_DelayMs
  1687 ;; This function is called by:
  1688 ;;		_Solar_BaseDefine
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _oneGLO
  1694  05E8                     _oneGLO:	
  1695  05E8                     l3732:	
  1696                           ;incstack = 0
  1697                           ; Regs used in _oneGLO: [wreg+status,2+status,0+pclath+cstack]
  1698                           
  1699                           
  1700                           ;main.c: 395: PC5 = 0;
  1701  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1702  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1703  05EA  1287               	bcf	7,5	;volatile
  1704                           
  1705                           ;main.c: 396: PA6 = 1;
  1706  05EB  1705               	bsf	5,6	;volatile
  1707                           
  1708                           ;main.c: 397: DelayMs(100);
  1709  05EC  3064               	movlw	100
  1710  05ED  25B9               	fcall	_DelayMs
  1711  05EE  0064               	clrwdt	;# 
  1712                           
  1713                           ;main.c: 399: PA6 = 0;
  1714  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  1715  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  1716  05F1  1305               	bcf	5,6	;volatile
  1717  05F2  0008               	return
  1718  05F3                     __end_of_oneGLO:	
  1719                           
  1720                           	psect	text8
  1721  04D9                     __ptext8:	
  1722 ;; *************** function _AD_baseWriteFuc *****************
  1723 ;; Defined at:
  1724 ;;		line 1643 in file "main.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  ad_vt           2    5[COMMON] unsigned int 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  ad_vh           1    3[BANK0 ] unsigned char 
  1729 ;;  ad_vl           1    2[BANK0 ] unsigned char 
  1730 ;;  ad_ch           1    1[BANK0 ] unsigned char 
  1731 ;;  ad_cl           1    0[BANK0 ] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2, status,0, pclath, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 300/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMMON   BANK0   BANK1
  1741 ;;      Params:         2       0       0
  1742 ;;      Locals:         0       4       0
  1743 ;;      Temps:          0       0       0
  1744 ;;      Totals:         2       4       0
  1745 ;;Total ram usage:        6 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    2
  1748 ;; This function calls:
  1749 ;;		_EEPROMread
  1750 ;;		_EEPROMwrite
  1751 ;; This function is called by:
  1752 ;;		_Solar_BaseDefine
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           
  1757                           ;psect for function _AD_baseWriteFuc
  1758  04D9                     _AD_baseWriteFuc:	
  1759                           
  1760                           ;main.c: 1645: unsigned char ad_vl,ad_vh;
  1761                           ;main.c: 1646: unsigned char ad_cl,ad_ch;
  1762                           ;main.c: 1648: ad_vl = (unsigned char)ad_vt;
  1763                           
  1764                           ;incstack = 0
  1765                           ; Regs used in _AD_baseWriteFuc: [wreg+status,2+status,0+pclath+cstack]
  1766  04D9  0875               	movf	AD_baseWriteFuc@ad_vt,w
  1767  04DA  00A2               	movwf	AD_baseWriteFuc@ad_vl
  1768                           
  1769                           ;main.c: 1650: ad_vh = (unsigned char)(ad_vt>>8)&0xff;
  1770  04DB  0876               	movf	AD_baseWriteFuc@ad_vt+1,w
  1771  04DC  00A3               	movwf	AD_baseWriteFuc@ad_vh
  1772                           
  1773                           ;main.c: 1653: EEPROMwrite(0x12, ad_vh);
  1774  04DD  0823               	movf	AD_baseWriteFuc@ad_vh,w
  1775  04DE  00F2               	movwf	EEPROMwrite@Data
  1776  04DF  3012               	movlw	18
  1777  04E0  2555               	fcall	_EEPROMwrite
  1778                           
  1779                           ;main.c: 1654: EEPROMwrite(0x13, ad_vl);
  1780  04E1  24F8               	fcall	PL22	;call to abstracted procedure
  1781  04E2  2555               	fcall	_EEPROMwrite
  1782                           
  1783                           ;main.c: 1656: ad_ch = EEPROMread(0x12);
  1784  04E3  3012               	movlw	18
  1785  04E4  2619               	fcall	_EEPROMread
  1786  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1787  04E6  00A1               	movwf	AD_baseWriteFuc@ad_ch
  1788                           
  1789                           ;main.c: 1657: ad_cl = EEPROMread(0x13);
  1790  04E7  3013               	movlw	19
  1791  04E8  2619               	fcall	_EEPROMread
  1792  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  1793  04EA  00A0               	movwf	AD_baseWriteFuc@ad_cl
  1794                           
  1795                           ;main.c: 1660: if((ad_cl != ad_vl ) || (ad_ch != ad_vh))
  1796  04EB  0622               	xorwf	AD_baseWriteFuc@ad_vl,w
  1797  04EC  1D03               	skipz
  1798  04ED  2CF2               	goto	l3824
  1799  04EE  0821               	movf	AD_baseWriteFuc@ad_ch,w
  1800  04EF  0623               	xorwf	AD_baseWriteFuc@ad_vh,w
  1801  04F0  1903               	skipnz
  1802  04F1  0008               	return
  1803  04F2                     l3824:	
  1804                           
  1805                           ;main.c: 1661: {
  1806                           ;main.c: 1662: EEPROMwrite(0x12, ad_vh);
  1807  04F2  0823               	movf	AD_baseWriteFuc@ad_vh,w
  1808  04F3  00F2               	movwf	EEPROMwrite@Data
  1809  04F4  3012               	movlw	18
  1810  04F5  2555               	fcall	_EEPROMwrite
  1811                           
  1812                           ;main.c: 1663: EEPROMwrite(0x13, ad_vl);
  1813  04F6  24F8               	fcall	PL22	;call to abstracted procedure
  1814  04F7  2D55               	ljmp	_EEPROMwrite
  1815  04F8                     __end_of_AD_baseWriteFuc:	
  1816  04F8                     PL22:	
  1817  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1818  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1819  04FA  0822               	movf	AD_baseWriteFuc@ad_vl,w
  1820  04FB  00F2               	movwf	EEPROMwrite@Data
  1821  04FC  3413               	retlw	19
  1822  04FD                     __end_ofPL22:	
  1823                           
  1824                           	psect	text9
  1825  0240                     __ptext9:	
  1826 ;; *************** function _Sola_checkFuc *****************
  1827 ;; Defined at:
  1828 ;;		line 1231 in file "main.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  ad_total       20   11[BANK0 ] unsigned int [10]
  1833 ;;  ad_v            2   34[BANK0 ] unsigned int 
  1834 ;;  ad_sum          2   32[BANK0 ] unsigned int 
  1835 ;;  i               1   37[BANK0 ] unsigned char 
  1836 ;;  j               1   36[BANK0 ] unsigned char 
  1837 ;;  z               1   31[BANK0 ] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 300/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMMON   BANK0   BANK1
  1847 ;;      Params:         0       0       0
  1848 ;;      Locals:         0      27       0
  1849 ;;      Temps:          0       4       0
  1850 ;;      Totals:         0      31       0
  1851 ;;Total ram usage:       31 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    2
  1854 ;; This function calls:
  1855 ;;		_GET_ADC_DATA
  1856 ;;		___lwdiv
  1857 ;; This function is called by:
  1858 ;;		_main
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           
  1863                           ;psect for function _Sola_checkFuc
  1864  0240                     _Sola_checkFuc:	
  1865                           
  1866                           ;main.c: 1238: unsigned char i,j,z;
  1867                           ;main.c: 1239: unsigned int ad_v,ad_total[10],ad_sum;
  1868                           ;main.c: 1240: static unsigned int ad_vpre = 0;
  1869                           ;main.c: 1243: for(z = 10;z--;)
  1870                           
  1871                           ;incstack = 0
  1872                           ; Regs used in _Sola_checkFuc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1873  0240  300A               	movlw	10
  1874  0241  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0242  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0243  00BF               	movwf	Sola_checkFuc@z
  1877  0244  2AED               	goto	l4250
  1878  0245                     l4208:	
  1879                           
  1880                           ;main.c: 1244: {
  1881                           ;main.c: 1245: ad_sum = 0;
  1882  0245  01C0               	clrf	Sola_checkFuc@ad_sum
  1883  0246  01C1               	clrf	Sola_checkFuc@ad_sum+1
  1884                           
  1885                           ;main.c: 1246: for(i = 0;i < 10;i++)
  1886  0247  01C5               	clrf	Sola_checkFuc@i
  1887  0248                     l4214:	
  1888                           
  1889                           ;main.c: 1247: {
  1890                           ;main.c: 1248: ad_total[i] = GET_ADC_DATA (0);
  1891  0248  3000               	movlw	0
  1892  0249  24B4               	fcall	_GET_ADC_DATA
  1893  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1894  024B  1003               	clrc
  1895  024C  0D45               	rlf	Sola_checkFuc@i,w
  1896  024D  3E2B               	addlw	(low (Sola_checkFuc@ad_total| 0))& (0+255)
  1897                           
  1898                           ;main.c: 1249: ad_sum += ad_total[i];
  1899  024E  2222               	fcall	PL6	;call to abstracted procedure
  1900  024F  0D45               	rlf	Sola_checkFuc@i,w
  1901  0250  2307               	fcall	PL10	;call to abstracted procedure
  1902  0251  2315               	fcall	PL16	;call to abstracted procedure
  1903  0252  300A               	movlw	10
  1904  0253  0AC5               	incf	Sola_checkFuc@i,f
  1905  0254  0245               	subwf	Sola_checkFuc@i,w
  1906  0255  1C03               	skipc
  1907  0256  2A48               	goto	l4214
  1908                           
  1909                           ;main.c: 1250: }
  1910                           ;main.c: 1251: for(i = 1;i < 10;i++)
  1911  0257  01C5               	clrf	Sola_checkFuc@i
  1912  0258  0AC5               	incf	Sola_checkFuc@i,f
  1913  0259                     l4226:	
  1914                           
  1915                           ;main.c: 1252: {
  1916                           ;main.c: 1253: for(j=0;j<10-i;j++)
  1917  0259  01C4               	clrf	Sola_checkFuc@j
  1918  025A                     l4234:	
  1919  025A  01A8               	clrf	??_Sola_checkFuc+1
  1920  025B  0845               	movf	Sola_checkFuc@i,w
  1921  025C  3C0A               	sublw	10
  1922  025D  00A7               	movwf	??_Sola_checkFuc
  1923  025E  1C03               	skipc
  1924  025F  03A8               	decf	??_Sola_checkFuc+1,f
  1925  0260  0828               	movf	??_Sola_checkFuc+1,w
  1926  0261  3A80               	xorlw	128
  1927  0262  3C80               	sublw	128
  1928  0263  1D03               	skipz
  1929  0264  2A67               	goto	u3325
  1930  0265  0827               	movf	??_Sola_checkFuc,w
  1931  0266  0244               	subwf	Sola_checkFuc@j,w
  1932  0267                     u3325:	
  1933  0267  1803               	btfsc	3,0
  1934  0268  2AA4               	goto	l1360
  1935                           
  1936                           ;main.c: 1254: {
  1937                           ;main.c: 1255: if(ad_total[j]> ad_total[j+1])
  1938  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1939  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1940  026B  1003               	clrc
  1941  026C  0D44               	rlf	Sola_checkFuc@j,w
  1942  026D  3E2B               	addlw	(low (Sola_checkFuc@ad_total| 0))& (0+255)
  1943  026E  0084               	movwf	4
  1944  026F  1383               	bcf	3,7	;select IRP bank0
  1945  0270  0800               	movf	0,w
  1946  0271  00A7               	movwf	??_Sola_checkFuc
  1947  0272  0A84               	incf	4,f
  1948  0273  0800               	movf	0,w
  1949  0274  00A8               	movwf	??_Sola_checkFuc+1
  1950  0275  230F               	fcall	PL12	;call to abstracted procedure
  1951  0276  0800               	movf	0,w
  1952  0277  00A9               	movwf	??_Sola_checkFuc+2
  1953  0278  0A84               	incf	4,f
  1954  0279  0800               	movf	0,w
  1955  027A  00AA               	movwf	??_Sola_checkFuc+3
  1956  027B  0828               	movf	??_Sola_checkFuc+1,w
  1957  027C  022A               	subwf	??_Sola_checkFuc+3,w
  1958  027D  1D03               	skipz
  1959  027E  2A81               	goto	u3315
  1960  027F  0827               	movf	??_Sola_checkFuc,w
  1961  0280  0229               	subwf	??_Sola_checkFuc+2,w
  1962  0281                     u3315:	
  1963  0281  1803               	skipnc
  1964  0282  2A9F               	goto	l1359
  1965                           
  1966                           ;main.c: 1256: {
  1967                           ;main.c: 1257: ad_v = ad_total[j];
  1968  0283  1003               	clrc
  1969  0284  0D44               	rlf	Sola_checkFuc@j,w
  1970  0285  3E2B               	addlw	(low (Sola_checkFuc@ad_total| 0))& (0+255)
  1971  0286  0084               	movwf	4
  1972  0287  0800               	movf	0,w
  1973  0288  00C2               	movwf	Sola_checkFuc@ad_v
  1974  0289  0A84               	incf	4,f
  1975  028A  0800               	movf	0,w
  1976  028B  00C3               	movwf	Sola_checkFuc@ad_v+1
  1977                           
  1978                           ;main.c: 1258: ad_total[j]=ad_total[j+1];
  1979  028C  1003               	clrc
  1980  028D  0D44               	rlf	Sola_checkFuc@j,w
  1981  028E  3E02               	addlw	2
  1982  028F  2307               	fcall	PL10	;call to abstracted procedure
  1983  0290  1003               	clrc
  1984  0291  0D44               	rlf	Sola_checkFuc@j,w
  1985  0292  3E2B               	addlw	(low (Sola_checkFuc@ad_total| 0))& (0+255)
  1986  0293  0084               	movwf	4
  1987  0294  0827               	movf	??_Sola_checkFuc,w
  1988  0295  0080               	movwf	0
  1989  0296  0A84               	incf	4,f
  1990  0297  0828               	movf	??_Sola_checkFuc+1,w
  1991  0298  0080               	movwf	0
  1992                           
  1993                           ;main.c: 1259: ad_total[j+1] = ad_v;
  1994  0299  230F               	fcall	PL12	;call to abstracted procedure
  1995  029A  0842               	movf	Sola_checkFuc@ad_v,w
  1996  029B  0080               	movwf	0
  1997  029C  0A84               	incf	4,f
  1998  029D  0843               	movf	Sola_checkFuc@ad_v+1,w
  1999  029E  0080               	movwf	0
  2000  029F                     l1359:	
  2001  029F  0064               	clrwdt	;# 
  2002  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2003  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2004  02A2  0AC4               	incf	Sola_checkFuc@j,f
  2005  02A3  2A5A               	goto	l4234
  2006  02A4                     l1360:	
  2007  02A4  0064               	clrwdt	;# 
  2008  02A5  300A               	movlw	10
  2009  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2010  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2011  02A8  0AC5               	incf	Sola_checkFuc@i,f
  2012  02A9  0245               	subwf	Sola_checkFuc@i,w
  2013  02AA  1C03               	skipc
  2014  02AB  2A59               	goto	l4226
  2015                           
  2016                           ;main.c: 1264: }
  2017                           ;main.c: 1267: ad_sum = ad_sum - ad_total[0] - ad_total[9];
  2018  02AC  082B               	movf	Sola_checkFuc@ad_total,w
  2019  02AD  073D               	addwf	Sola_checkFuc@ad_total+18,w
  2020  02AE  00A7               	movwf	??_Sola_checkFuc
  2021  02AF  082C               	movf	Sola_checkFuc@ad_total+1,w
  2022  02B0  1803               	skipnc
  2023  02B1  0A2C               	incf	Sola_checkFuc@ad_total+1,w
  2024  02B2  073E               	addwf	Sola_checkFuc@ad_total+19,w
  2025  02B3  00A8               	movwf	??_Sola_checkFuc+1
  2026  02B4  09A7               	comf	??_Sola_checkFuc,f
  2027  02B5  09A8               	comf	??_Sola_checkFuc+1,f
  2028  02B6  0AA7               	incf	??_Sola_checkFuc,f
  2029  02B7  1903               	skipnz
  2030  02B8  0AA8               	incf	??_Sola_checkFuc+1,f
  2031  02B9  2315               	fcall	PL16	;call to abstracted procedure
  2032                           
  2033                           ;main.c: 1268: ad_sum >>= 3;
  2034  02BA  1003               	clrc
  2035  02BB  0CC1               	rrf	Sola_checkFuc@ad_sum+1,f
  2036  02BC  0CC0               	rrf	Sola_checkFuc@ad_sum,f
  2037  02BD  1003               	clrc
  2038  02BE  0CC1               	rrf	Sola_checkFuc@ad_sum+1,f
  2039  02BF  0CC0               	rrf	Sola_checkFuc@ad_sum,f
  2040  02C0  1003               	clrc
  2041  02C1  0CC1               	rrf	Sola_checkFuc@ad_sum+1,f
  2042  02C2  0CC0               	rrf	Sola_checkFuc@ad_sum,f
  2043                           
  2044                           ;main.c: 1273: ad_v = 2 * ad_sum + (10 - 2)*ad_vpre;
  2045  02C3  0841               	movf	Sola_checkFuc@ad_sum+1,w
  2046  02C4  00C3               	movwf	Sola_checkFuc@ad_v+1
  2047  02C5  0840               	movf	Sola_checkFuc@ad_sum,w
  2048  02C6  00C2               	movwf	Sola_checkFuc@ad_v
  2049  02C7  1003               	clrc
  2050  02C8  0DC2               	rlf	Sola_checkFuc@ad_v,f
  2051  02C9  0DC3               	rlf	Sola_checkFuc@ad_v+1,f
  2052  02CA  085D               	movf	Sola_checkFuc@ad_vpre+1,w
  2053  02CB  00A8               	movwf	??_Sola_checkFuc+1
  2054  02CC  085C               	movf	Sola_checkFuc@ad_vpre,w
  2055  02CD  00A7               	movwf	??_Sola_checkFuc
  2056  02CE  1003               	clrc
  2057  02CF  0DA7               	rlf	??_Sola_checkFuc,f
  2058  02D0  0DA8               	rlf	??_Sola_checkFuc+1,f
  2059  02D1  1003               	clrc
  2060  02D2  0DA7               	rlf	??_Sola_checkFuc,f
  2061  02D3  0DA8               	rlf	??_Sola_checkFuc+1,f
  2062  02D4  1003               	clrc
  2063  02D5  0DA7               	rlf	??_Sola_checkFuc,f
  2064  02D6  0DA8               	rlf	??_Sola_checkFuc+1,f
  2065  02D7  0827               	movf	??_Sola_checkFuc,w
  2066  02D8  07C2               	addwf	Sola_checkFuc@ad_v,f
  2067  02D9  1803               	skipnc
  2068  02DA  0AC3               	incf	Sola_checkFuc@ad_v+1,f
  2069  02DB  0828               	movf	??_Sola_checkFuc+1,w
  2070  02DC  07C3               	addwf	Sola_checkFuc@ad_v+1,f
  2071                           
  2072                           ;main.c: 1274: ad_v = ad_v/10;
  2073  02DD  300A               	movlw	10
  2074  02DE  00A0               	movwf	___lwdiv@divisor
  2075  02DF  01A1               	clrf	___lwdiv@divisor+1
  2076  02E0  0843               	movf	Sola_checkFuc@ad_v+1,w
  2077  02E1  00A3               	movwf	___lwdiv@dividend+1
  2078  02E2  0842               	movf	Sola_checkFuc@ad_v,w
  2079  02E3  00A2               	movwf	___lwdiv@dividend
  2080  02E4  2462               	fcall	___lwdiv
  2081  02E5  0821               	movf	?___lwdiv+1,w
  2082  02E6  00C3               	movwf	Sola_checkFuc@ad_v+1
  2083  02E7  0820               	movf	?___lwdiv,w
  2084  02E8  00C2               	movwf	Sola_checkFuc@ad_v
  2085                           
  2086                           ;main.c: 1275: ad_vpre = ad_v;
  2087  02E9  0843               	movf	Sola_checkFuc@ad_v+1,w
  2088  02EA  00DD               	movwf	Sola_checkFuc@ad_vpre+1
  2089  02EB  0842               	movf	Sola_checkFuc@ad_v,w
  2090  02EC  00DC               	movwf	Sola_checkFuc@ad_vpre
  2091  02ED                     l4250:	
  2092  02ED  03BF               	decf	Sola_checkFuc@z,f
  2093  02EE  0F3F               	incfsz	Sola_checkFuc@z,w
  2094  02EF  2A45               	goto	l4208
  2095                           
  2096                           ;main.c: 1277: }
  2097                           ;main.c: 1280: if(g_adBaseValue == 0)return;
  2098  02F0  0862               	movf	_g_adBaseValue,w	;volatile
  2099  02F1  0463               	iorwf	_g_adBaseValue+1,w	;volatile
  2100  02F2  1903               	btfsc	3,2
  2101  02F3  0008               	return
  2102                           
  2103                           ;main.c: 1282: if((g_gloCntTimer & 0x80) == 0x80)
  2104  02F4  1FE9               	btfss	_g_gloCntTimer,7	;volatile
  2105  02F5  2B02               	goto	l1364
  2106                           
  2107                           ;main.c: 1283: {
  2108                           ;main.c: 1284: if(ad_v <= g_adBaseValue)
  2109  02F6  0843               	movf	Sola_checkFuc@ad_v+1,w
  2110  02F7  0263               	subwf	_g_adBaseValue+1,w	;volatile
  2111  02F8  1D03               	skipz
  2112  02F9  2AFC               	goto	u3375
  2113  02FA  0842               	movf	Sola_checkFuc@ad_v,w
  2114  02FB  0262               	subwf	_g_adBaseValue,w	;volatile
  2115  02FC                     u3375:	
  2116  02FC  1C03               	skipc
  2117  02FD  2B00               	goto	l4260
  2118                           
  2119                           ;main.c: 1285: g_gloEnvt_st = NORMAL_ENVT;
  2120  02FE  3001               	movlw	1
  2121  02FF  2B01               	goto	L1
  2122  0300                     l4260:	
  2123                           
  2124                           ;main.c: 1286: else
  2125                           ;main.c: 1287: {
  2126                           ;main.c: 1288: g_gloEnvt_st = BEYOND_ENVT;
  2127  0300  3002               	movlw	2
  2128  0301                     L1:	
  2129  0301  00EA               	movwf	_g_gloEnvt_st	;volatile
  2130  0302                     l1364:	
  2131                           
  2132                           ;main.c: 1289: }
  2133                           ;main.c: 1290: }
  2134                           ;main.c: 1292: g_gloCurValue = ad_v;
  2135  0302  0843               	movf	Sola_checkFuc@ad_v+1,w
  2136  0303  00DF               	movwf	_g_gloCurValue+1	;volatile
  2137  0304  0842               	movf	Sola_checkFuc@ad_v,w
  2138  0305  00DE               	movwf	_g_gloCurValue	;volatile
  2139  0306  0008               	return
  2140  0307                     __end_of_Sola_checkFuc:	
  2141  0307                     PL10:	
  2142  0307  3E2B               	addlw	(low (Sola_checkFuc@ad_total| 0))& (0+255)
  2143  0308  0084               	movwf	4
  2144  0309  0800               	movf	0,w
  2145  030A  00A7               	movwf	??_Sola_checkFuc
  2146  030B  0A84               	incf	4,f
  2147  030C  0800               	movf	0,w
  2148  030D  00A8               	movwf	??_Sola_checkFuc+1
  2149  030E  0008               	return
  2150  030F                     __end_ofPL10:	
  2151  030F                     PL12:	
  2152  030F  1003               	clrc
  2153  0310  0D44               	rlf	Sola_checkFuc@j,w
  2154  0311  3E02               	addlw	2
  2155  0312  3E2B               	addlw	(low (Sola_checkFuc@ad_total| 0))& (0+255)
  2156  0313  0084               	movwf	4
  2157  0314  0008               	return
  2158  0315                     __end_ofPL12:	
  2159  0315                     PL16:	
  2160  0315  0827               	movf	??_Sola_checkFuc,w
  2161  0316  07C0               	addwf	Sola_checkFuc@ad_sum,f
  2162  0317  1803               	skipnc
  2163  0318  0AC1               	incf	Sola_checkFuc@ad_sum+1,f
  2164  0319  0828               	movf	??_Sola_checkFuc+1,w
  2165  031A  07C1               	addwf	Sola_checkFuc@ad_sum+1,f
  2166  031B  0008               	return
  2167  031C                     __end_ofPL16:	
  2168                           
  2169                           	psect	text10
  2170  04B4                     __ptext10:	
  2171 ;; *************** function _GET_ADC_DATA *****************
  2172 ;; Defined at:
  2173 ;;		line 535 in file "main.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  AN_CH           1    wreg     unsigned char 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  AN_CH           1    8[COMMON] unsigned char 
  2178 ;;  ADC_DATA        2    6[COMMON] unsigned int 
  2179 ;;  AD_chBuff       1    5[COMMON] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2    2[COMMON] unsigned int 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 300/100
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1
  2189 ;;      Params:         3       0       0
  2190 ;;      Locals:         4       0       0
  2191 ;;      Temps:          0       0       0
  2192 ;;      Totals:         7       0       0
  2193 ;;Total ram usage:        7 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_Sola_checkFuc
  2200 ;;		_Solar_BaseDefine
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           
  2205                           ;psect for function _GET_ADC_DATA
  2206  04B4                     _GET_ADC_DATA:	
  2207                           
  2208                           ;incstack = 0
  2209                           ; Regs used in _GET_ADC_DATA: [wreg+status,2+status,0]
  2210                           ;GET_ADC_DATA@AN_CH stored from wreg
  2211  04B4  00F8               	movwf	GET_ADC_DATA@AN_CH
  2212                           
  2213                           ;main.c: 540: if(AN_CH != 0)
  2214  04B5  0878               	movf	GET_ADC_DATA@AN_CH,w
  2215  04B6  1903               	btfsc	3,2
  2216  04B7  2CC6               	goto	l1137
  2217                           
  2218                           ;main.c: 541: {
  2219                           ;main.c: 542: AD_chBuff = ADCON0 & 0B11100011;
  2220  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2221  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2222  04BA  081F               	movf	31,w	;volatile
  2223  04BB  00F5               	movwf	GET_ADC_DATA@AD_chBuff
  2224  04BC  30E3               	movlw	227
  2225  04BD  05F5               	andwf	GET_ADC_DATA@AD_chBuff,f
  2226                           
  2227                           ;main.c: 544: AN_CH <<= 2;
  2228  04BE  1003               	clrc
  2229  04BF  0DF8               	rlf	GET_ADC_DATA@AN_CH,f
  2230  04C0  1003               	clrc
  2231  04C1  0DF8               	rlf	GET_ADC_DATA@AN_CH,f
  2232                           
  2233                           ;main.c: 545: AD_chBuff |= AN_CH;
  2234  04C2  0878               	movf	GET_ADC_DATA@AN_CH,w
  2235  04C3  04F5               	iorwf	GET_ADC_DATA@AD_chBuff,f
  2236                           
  2237                           ;main.c: 547: ADCON0 = AD_chBuff;
  2238  04C4  0875               	movf	GET_ADC_DATA@AD_chBuff,w
  2239  04C5  009F               	movwf	31	;volatile
  2240  04C6                     l1137:	
  2241  04C6  0064               	clrwdt	;# 
  2242                           
  2243                           ;main.c: 551: GO_DONE = 1;
  2244  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  2245  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  2246  04C9  149F               	bsf	31,1	;volatile
  2247  04CA                     l1138:	
  2248                           ;main.c: 552: while( GO_DONE==1 );
  2249                           
  2250  04CA  189F               	btfsc	31,1	;volatile
  2251  04CB  2CCA               	goto	l1138
  2252                           
  2253                           ;main.c: 557: ADC_DATA = ADRESH;
  2254  04CC  081E               	movf	30,w	;volatile
  2255  04CD  00F6               	movwf	GET_ADC_DATA@ADC_DATA
  2256  04CE  01F7               	clrf	GET_ADC_DATA@ADC_DATA+1
  2257                           
  2258                           ;main.c: 558: ADC_DATA <<= 8;
  2259  04CF  00F7               	movwf	GET_ADC_DATA@ADC_DATA+1
  2260  04D0  01F6               	clrf	GET_ADC_DATA@ADC_DATA
  2261                           
  2262                           ;main.c: 559: ADC_DATA |= ADRESL;
  2263  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2264  04D2  081E               	movf	30,w	;volatile
  2265  04D3  04F6               	iorwf	GET_ADC_DATA@ADC_DATA,f
  2266                           
  2267                           ;main.c: 562: return ADC_DATA;
  2268  04D4  0877               	movf	GET_ADC_DATA@ADC_DATA+1,w
  2269  04D5  00F3               	movwf	?_GET_ADC_DATA+1
  2270  04D6  0876               	movf	GET_ADC_DATA@ADC_DATA,w
  2271  04D7  00F2               	movwf	?_GET_ADC_DATA
  2272  04D8  0008               	return
  2273  04D9                     __end_of_GET_ADC_DATA:	
  2274                           
  2275                           	psect	text11
  2276  0571                     __ptext11:	
  2277 ;; *************** function _POWER_INITIAL *****************
  2278 ;; Defined at:
  2279 ;;		line 468 in file "main.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2
  2288 ;; Tracked objects:
  2289 ;;		On entry : B00/0
  2290 ;;		On exit  : B00/0
  2291 ;;		Unchanged: 800/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1
  2293 ;;      Params:         0       0       0
  2294 ;;      Locals:         0       0       0
  2295 ;;      Temps:          0       0       0
  2296 ;;      Totals:         0       0       0
  2297 ;;Total ram usage:        0 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    1
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function _POWER_INITIAL
  2309  0571                     _POWER_INITIAL:	
  2310                           
  2311                           ;main.c: 470: OSCCON = 0B01100001;
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _POWER_INITIAL: [wreg+status,2]
  2315  0571  3061               	movlw	97
  2316  0572  1683               	bsf	3,5	;RP0=1, select bank1
  2317  0573  008F               	movwf	15	;volatile
  2318                           
  2319                           ;main.c: 472: INTCON = 0;
  2320  0574  018B               	clrf	11	;volatile
  2321                           
  2322                           ;main.c: 473: TRISA = 0B10011101;
  2323  0575  309D               	movlw	157
  2324  0576  0085               	movwf	5	;volatile
  2325                           
  2326                           ;main.c: 474: PORTA = 0;
  2327  0577  1283               	bcf	3,5	;RP0=0, select bank0
  2328  0578  0185               	clrf	5	;volatile
  2329                           
  2330                           ;main.c: 476: TRISC = 0B00001011;
  2331  0579  300B               	movlw	11
  2332  057A  1683               	bsf	3,5	;RP0=1, select bank1
  2333  057B  0087               	movwf	7	;volatile
  2334                           
  2335                           ;main.c: 481: PORTC = 0;
  2336  057C  1283               	bcf	3,5	;RP0=0, select bank0
  2337  057D  0187               	clrf	7	;volatile
  2338                           
  2339                           ;main.c: 483: WPUA = 0B00011100;
  2340  057E  301C               	movlw	28
  2341  057F  1683               	bsf	3,5	;RP0=1, select bank1
  2342  0580  0095               	movwf	21	;volatile
  2343                           
  2344                           ;main.c: 484: WPUC = 0;
  2345  0581  0188               	clrf	8	;volatile
  2346                           
  2347                           ;main.c: 485: WPUC1 = 1;
  2348  0582  1488               	bsf	8,1	;volatile
  2349                           
  2350                           ;main.c: 489: OPTION = 0B00001000;
  2351  0583  3008               	movlw	8
  2352  0584  0081               	movwf	1	;volatile
  2353                           
  2354                           ;main.c: 493: MSCKCON = 0B00000000;
  2355  0585  1283               	bcf	3,5	;RP0=0, select bank0
  2356  0586  019B               	clrf	27	;volatile
  2357                           
  2358                           ;main.c: 496: CMCON0 = 0B00000111;
  2359  0587  3007               	movlw	7
  2360  0588  0099               	movwf	25	;volatile
  2361                           
  2362                           ;main.c: 499: g_checkStBits = 0;
  2363  0589  01E8               	clrf	_g_checkStBits	;volatile
  2364  058A  0008               	return
  2365  058B                     __end_of_POWER_INITIAL:	
  2366                           
  2367                           	psect	text12
  2368  03FA                     __ptext12:	
  2369 ;; *************** function _Mode_changeCheckFuc *****************
  2370 ;; Defined at:
  2371 ;;		line 769 in file "main.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;		None
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0, pclath, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 300/0
  2382 ;;		On exit  : 300/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMMON   BANK0   BANK1
  2385 ;;      Params:         0       0       0
  2386 ;;      Locals:         0       0       0
  2387 ;;      Temps:          1       0       0
  2388 ;;      Totals:         1       0       0
  2389 ;;Total ram usage:        1 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    3
  2392 ;; This function calls:
  2393 ;;		_DelayMs
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           
  2400                           ;psect for function _Mode_changeCheckFuc
  2401  03FA                     _Mode_changeCheckFuc:	
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _Mode_changeCheckFuc: [wreg+status,2+status,0+pclath+cstack]
  2405                           ;main.c: 772: do{TRISA |= 0B00011100;WPUA |= 0B00011100;}while(0);;
  2406  03FA  301C               	movlw	28
  2407  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  2408  03FC  0485               	iorwf	5,f	;volatile
  2409  03FD  0495               	iorwf	21,f	;volatile
  2410                           
  2411                           ;main.c: 773: DelayMs(1);
  2412  03FE  3001               	movlw	1
  2413  03FF  25B9               	fcall	_DelayMs
  2414                           
  2415                           ;main.c: 775: if(!PA2 || !PA4 || !PA3)
  2416  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2417  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2418  0402  1905               	btfsc	5,2	;volatile
  2419  0403  1E05               	btfss	5,4	;volatile
  2420  0404  2C07               	goto	l3914
  2421  0405  1985               	btfsc	5,3	;volatile
  2422  0406  2C1D               	goto	l3928
  2423  0407                     l3914:	
  2424                           
  2425                           ;main.c: 776: {
  2426                           ;main.c: 777: DelayMs(10);
  2427  0407  300A               	movlw	10
  2428  0408  25B9               	fcall	_DelayMs
  2429                           
  2430                           ;main.c: 778: if(!PA2 || !PA4 || !PA3)
  2431  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2432  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2433  040B  1905               	btfsc	5,2	;volatile
  2434  040C  1E05               	btfss	5,4	;volatile
  2435  040D  2C10               	goto	l1177
  2436  040E  1985               	btfsc	5,3	;volatile
  2437  040F  2C2D               	goto	l3936
  2438  0410                     l1177:	
  2439                           
  2440                           ;main.c: 779: {
  2441                           ;main.c: 781: if(!PA2)
  2442  0410  1905               	btfsc	5,2	;volatile
  2443  0411  2C14               	goto	l1178
  2444                           
  2445                           ;main.c: 782: {
  2446                           ;main.c: 784: g_checkMode = OFF2HI_MODE;
  2447  0412  3001               	movlw	1
  2448  0413  2C1B               	goto	L3
  2449  0414                     l1178:	
  2450                           ;main.c: 785: }
  2451                           
  2452                           
  2453                           ;main.c: 786: else if(!PA4)
  2454  0414  1A05               	btfsc	5,4	;volatile
  2455  0415  2C18               	goto	l1180
  2456                           
  2457                           ;main.c: 787: {
  2458                           ;main.c: 789: g_checkMode = GLO_MODE;
  2459  0416  3003               	movlw	3
  2460  0417  2C1B               	goto	L3
  2461  0418                     l1180:	
  2462                           ;main.c: 790: }
  2463                           
  2464                           
  2465                           ;main.c: 791: else if(!PA3)
  2466  0418  1985               	btfsc	5,3	;volatile
  2467  0419  2C2D               	goto	l3936
  2468                           
  2469                           ;main.c: 792: {
  2470                           ;main.c: 794: g_checkMode = GLO2HI_MODE;
  2471  041A  3002               	movlw	2
  2472  041B                     L3:	
  2473  041B  00C7               	movwf	_g_checkMode	;volatile
  2474                           
  2475                           ;main.c: 795: }
  2476                           ;main.c: 796: }
  2477                           ;main.c: 798: }else
  2478  041C  2C2D               	goto	l3936
  2479  041D                     l3928:	
  2480                           
  2481                           ;main.c: 799: if((PORTA & 0B00011100) == 0B00011100)
  2482  041D  301C               	movlw	28
  2483  041E  0505               	andwf	5,w	;volatile
  2484  041F  00F7               	movwf	??_Mode_changeCheckFuc
  2485  0420  3A1C               	xorlw	28
  2486  0421  1D03               	btfss	3,2
  2487  0422  2C2D               	goto	l3936
  2488                           
  2489                           ;main.c: 800: {
  2490                           ;main.c: 801: DelayMs(10);
  2491  0423  300A               	movlw	10
  2492  0424  25B9               	fcall	_DelayMs
  2493                           
  2494                           ;main.c: 802: if((PORTA & 0B00011100) == 0B00011100)
  2495  0425  301C               	movlw	28
  2496  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2497  0427  1303               	bcf	3,6	;RP1=0, select bank0
  2498  0428  0505               	andwf	5,w	;volatile
  2499  0429  00F7               	movwf	??_Mode_changeCheckFuc
  2500  042A  3A1C               	xorlw	28
  2501  042B  1903               	btfsc	3,2
  2502                           
  2503                           ;main.c: 803: {
  2504                           ;main.c: 805: g_checkMode = OFF_MODE;
  2505  042C  01C7               	clrf	_g_checkMode	;volatile
  2506  042D                     l3936:	
  2507  042D  2C2E               	ljmp	PL2	;call to abstracted procedure
  2508  042E                     __end_of_Mode_changeCheckFuc:	
  2509  042E                     PL2:	
  2510  042E  30E3               	movlw	227
  2511  042F  1683               	bsf	3,5	;RP0=1, select bank1
  2512  0430  0585               	andwf	5,f	;volatile
  2513  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2514  0432  0585               	andwf	5,f	;volatile
  2515  0433  0008               	return
  2516  0434                     __end_ofPL2:	
  2517                           
  2518                           	psect	text13
  2519  05F3                     __ptext13:	
  2520 ;; *************** function _INT_INITIAL *****************
  2521 ;; Defined at:
  2522 ;;		line 591 in file "main.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  ReadAPin        1    0        unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg
  2531 ;; Tracked objects:
  2532 ;;		On entry : 300/0
  2533 ;;		On exit  : 300/100
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1
  2536 ;;      Params:         0       0       0
  2537 ;;      Locals:         0       0       0
  2538 ;;      Temps:          0       0       0
  2539 ;;      Totals:         0       0       0
  2540 ;;Total ram usage:        0 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    1
  2543 ;; This function calls:
  2544 ;;		Nothing
  2545 ;; This function is called by:
  2546 ;;		_main
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           
  2551                           ;psect for function _INT_INITIAL
  2552  05F3                     _INT_INITIAL:	
  2553                           
  2554                           ;main.c: 593: unsigned char ReadAPin;
  2555                           ;main.c: 597: IOCA = 0B10011100;
  2556                           
  2557                           ;incstack = 0
  2558                           ; Regs used in _INT_INITIAL: [wreg]
  2559  05F3  309C               	movlw	156
  2560  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  2561  05F5  0096               	movwf	22	;volatile
  2562                           
  2563                           ;main.c: 598: ReadAPin = PORTA;
  2564  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  2565  05F7  0805               	movf	5,w	;volatile
  2566                           
  2567                           ;main.c: 600: INTEDG =0;
  2568  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  2569  05F9  1301               	bcf	1,6	;volatile
  2570                           
  2571                           ;main.c: 604: PAIF = 0;
  2572  05FA  100B               	bcf	11,0	;volatile
  2573                           
  2574                           ;main.c: 605: PAIE = 1;
  2575  05FB  158B               	bsf	11,3	;volatile
  2576                           
  2577                           ;main.c: 606: GIE =1;
  2578  05FC  178B               	bsf	11,7	;volatile
  2579  05FD  0008               	return
  2580  05FE                     __end_of_INT_INITIAL:	
  2581                           
  2582                           	psect	text14
  2583  03A3                     __ptext14:	
  2584 ;; *************** function _GLO_cdsCheckFuc *****************
  2585 ;; Defined at:
  2586 ;;		line 1307 in file "main.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  m_adpre         1    8[COMMON] unsigned char 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2, status,0, pclath, cstack
  2595 ;; Tracked objects:
  2596 ;;		On entry : 300/0
  2597 ;;		On exit  : 300/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1
  2600 ;;      Params:         0       0       0
  2601 ;;      Locals:         1       0       0
  2602 ;;      Temps:          0       0       0
  2603 ;;      Totals:         1       0       0
  2604 ;;Total ram usage:        1 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    2
  2607 ;; This function calls:
  2608 ;;		___lwdiv
  2609 ;;		___wmul
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _GLO_cdsCheckFuc
  2617  03A3                     _GLO_cdsCheckFuc:	
  2618                           
  2619                           ;main.c: 1309: unsigned char m_adpre;
  2620                           ;main.c: 1310: static unsigned char av_check_lt = 0;
  2621                           ;main.c: 1311: static unsigned char av_check_dt = 0;
  2622                           ;main.c: 1314: if(g_gloCntTimer > 0x80)
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in _GLO_cdsCheckFuc: [wreg+status,2+status,0+pclath+cstack]
  2626  03A3  3081               	movlw	129
  2627  03A4  0269               	subwf	_g_gloCntTimer,w	;volatile
  2628  03A5  1C03               	skipc
  2629  03A6  2BD8               	goto	l1373
  2630                           
  2631                           ;main.c: 1315: {
  2632                           ;main.c: 1316: g_gloCntTimer--;
  2633  03A7  03E9               	decf	_g_gloCntTimer,f	;volatile
  2634                           
  2635                           ;main.c: 1317: if(g_gloCntTimer==0x80)
  2636  03A8  3080               	movlw	128
  2637  03A9  0669               	xorwf	_g_gloCntTimer,w	;volatile
  2638  03AA  1D03               	btfss	3,2
  2639  03AB  2BD8               	goto	l1373
  2640                           
  2641                           ;main.c: 1318: {
  2642                           ;main.c: 1320: if(g_gloEnvt_st == NORMAL_ENVT)
  2643  03AC  0B6A               	decfsz	_g_gloEnvt_st,w	;volatile
  2644  03AD  2BB7               	goto	l4272
  2645  03AE                     l4270:	
  2646                           
  2647                           ;main.c: 1321: g_gloRecValue = g_adBaseValue + g_cdsCmp;
  2648  03AE  0866               	movf	_g_cdsCmp,w	;volatile
  2649  03AF  00E0               	movwf	_g_gloRecValue	;volatile
  2650  03B0  01E1               	clrf	_g_gloRecValue+1	;volatile
  2651  03B1  0862               	movf	_g_adBaseValue,w	;volatile
  2652  03B2  07E0               	addwf	_g_gloRecValue,f	;volatile
  2653  03B3  1803               	skipnc
  2654  03B4  0AE1               	incf	_g_gloRecValue+1,f	;volatile
  2655  03B5  0863               	movf	_g_adBaseValue+1,w	;volatile
  2656  03B6  2BD7               	goto	L4
  2657  03B7                     l4272:	
  2658                           
  2659                           ;main.c: 1322: else
  2660                           ;main.c: 1323: if(g_gloEnvt_st == BEYOND_ENVT)
  2661  03B7  3002               	movlw	2
  2662  03B8  066A               	xorwf	_g_gloEnvt_st,w	;volatile
  2663  03B9  1D03               	btfss	3,2
  2664  03BA  2BD8               	goto	l1373
  2665                           
  2666                           ;main.c: 1324: {
  2667                           ;main.c: 1326: m_adpre = g_adBaseValue*100/g_gloCurValue;
  2668  03BB  085F               	movf	_g_gloCurValue+1,w	;volatile
  2669  03BC  00A1               	movwf	___lwdiv@divisor+1
  2670  03BD  085E               	movf	_g_gloCurValue,w	;volatile
  2671  03BE  00A0               	movwf	___lwdiv@divisor
  2672  03BF  0863               	movf	_g_adBaseValue+1,w	;volatile
  2673  03C0  00F3               	movwf	___wmul@multiplier+1
  2674  03C1  0862               	movf	_g_adBaseValue,w	;volatile
  2675  03C2  00F2               	movwf	___wmul@multiplier
  2676  03C3  3064               	movlw	100
  2677  03C4  00F4               	movwf	___wmul@multiplicand
  2678  03C5  01F5               	clrf	___wmul@multiplicand+1
  2679  03C6  258B               	fcall	___wmul
  2680  03C7  239E               	fcall	PL26	;call to abstracted procedure
  2681  03C8  2462               	fcall	___lwdiv
  2682  03C9  0820               	movf	?___lwdiv,w
  2683  03CA  00F8               	movwf	GLO_cdsCheckFuc@m_adpre
  2684                           
  2685                           ;main.c: 1328: if(m_adpre < 40)
  2686  03CB  3028               	movlw	40
  2687  03CC  0278               	subwf	GLO_cdsCheckFuc@m_adpre,w
  2688  03CD  1C03               	btfss	3,0
  2689  03CE  2BAE               	goto	l4270
  2690                           
  2691                           ;main.c: 1330: else
  2692                           ;main.c: 1331: {
  2693                           ;main.c: 1332: g_gloRecValue = g_gloCurValue + g_cdsCmp;
  2694  03CF  0866               	movf	_g_cdsCmp,w	;volatile
  2695  03D0  00E0               	movwf	_g_gloRecValue	;volatile
  2696  03D1  01E1               	clrf	_g_gloRecValue+1	;volatile
  2697  03D2  085E               	movf	_g_gloCurValue,w	;volatile
  2698  03D3  07E0               	addwf	_g_gloRecValue,f	;volatile
  2699  03D4  1803               	skipnc
  2700  03D5  0AE1               	incf	_g_gloRecValue+1,f	;volatile
  2701  03D6  085F               	movf	_g_gloCurValue+1,w	;volatile
  2702  03D7                     L4:	
  2703  03D7  07E1               	addwf	_g_gloRecValue+1,f	;volatile
  2704  03D8                     l1373:	
  2705                           
  2706                           ;main.c: 1333: }
  2707                           ;main.c: 1334: }
  2708                           ;main.c: 1336: }
  2709                           ;main.c: 1338: }
  2710                           ;main.c: 1341: if( g_gloCurValue > g_gloRecValue)
  2711  03D8  085F               	movf	_g_gloCurValue+1,w	;volatile
  2712  03D9  0261               	subwf	_g_gloRecValue+1,w	;volatile
  2713  03DA  1D03               	skipz
  2714  03DB  2BDE               	goto	u3435
  2715  03DC  085E               	movf	_g_gloCurValue,w	;volatile
  2716  03DD  0260               	subwf	_g_gloRecValue,w	;volatile
  2717  03DE                     u3435:	
  2718  03DE  1803               	skipnc
  2719  03DF  2BE9               	goto	l4292
  2720  03E0  3002               	movlw	2
  2721                           
  2722                           ;main.c: 1342: {
  2723                           ;main.c: 1343: av_check_lt++;
  2724  03E1  0AE5               	incf	GLO_cdsCheckFuc@av_check_lt,f
  2725                           
  2726                           ;main.c: 1344: av_check_dt= 0;
  2727  03E2  01E4               	clrf	GLO_cdsCheckFuc@av_check_dt
  2728                           
  2729                           ;main.c: 1346: if(av_check_lt > 1)
  2730  03E3  0265               	subwf	GLO_cdsCheckFuc@av_check_lt,w
  2731  03E4  1C03               	skipc
  2732  03E5  0008               	return
  2733                           
  2734                           ;main.c: 1347: {
  2735                           ;main.c: 1348: av_check_lt = 0;
  2736  03E6  01E5               	clrf	GLO_cdsCheckFuc@av_check_lt
  2737                           
  2738                           ;main.c: 1349: ((g_checkStBits) &= ~(0B00000010));
  2739  03E7  10E8               	bcf	_g_checkStBits,1	;volatile
  2740  03E8  0008               	return
  2741  03E9                     l4292:	
  2742                           
  2743                           ;main.c: 1353: if( g_gloCurValue <= g_adBaseValue)
  2744  03E9  085F               	movf	_g_gloCurValue+1,w	;volatile
  2745  03EA  0263               	subwf	_g_adBaseValue+1,w	;volatile
  2746  03EB  1D03               	skipz
  2747  03EC  2BEF               	goto	u3455
  2748  03ED  085E               	movf	_g_gloCurValue,w	;volatile
  2749  03EE  0262               	subwf	_g_adBaseValue,w	;volatile
  2750  03EF                     u3455:	
  2751  03EF  1C03               	skipc
  2752  03F0  0008               	return
  2753  03F1  3002               	movlw	2
  2754                           
  2755                           ;main.c: 1354: {
  2756                           ;main.c: 1355: av_check_dt++;
  2757  03F2  0AE4               	incf	GLO_cdsCheckFuc@av_check_dt,f
  2758                           
  2759                           ;main.c: 1356: av_check_lt = 0;
  2760  03F3  01E5               	clrf	GLO_cdsCheckFuc@av_check_lt
  2761                           
  2762                           ;main.c: 1358: if(av_check_dt > 1)
  2763  03F4  0264               	subwf	GLO_cdsCheckFuc@av_check_dt,w
  2764  03F5  1C03               	skipc
  2765  03F6  0008               	return
  2766                           
  2767                           ;main.c: 1359: {
  2768                           ;main.c: 1360: av_check_dt = 0;
  2769  03F7  01E4               	clrf	GLO_cdsCheckFuc@av_check_dt
  2770                           
  2771                           ;main.c: 1361: ((g_checkStBits) |= (0B00000010));
  2772  03F8  14E8               	bsf	_g_checkStBits,1	;volatile
  2773  03F9  0008               	return
  2774  03FA                     __end_of_GLO_cdsCheckFuc:	
  2775                           
  2776                           	psect	text15
  2777  058B                     __ptext15:	
  2778 ;; *************** function ___wmul *****************
  2779 ;; Defined at:
  2780 ;;		line 15 in file "f:\doc\datesheet\mcu\pf\ide3.0.1_200917\data\sources\common\Umul16.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  multiplier      2    2[COMMON] unsigned int 
  2783 ;;  multiplicand    2    4[COMMON] unsigned int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  product         2    6[COMMON] unsigned int 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  2    2[COMMON] unsigned int 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0
  2790 ;; Tracked objects:
  2791 ;;		On entry : 300/0
  2792 ;;		On exit  : 300/0
  2793 ;;		Unchanged: 300/0
  2794 ;; Data sizes:     COMMON   BANK0   BANK1
  2795 ;;      Params:         4       0       0
  2796 ;;      Locals:         2       0       0
  2797 ;;      Temps:          0       0       0
  2798 ;;      Totals:         6       0       0
  2799 ;;Total ram usage:        6 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_GLO_cdsCheckFuc
  2806 ;;		_main
  2807 ;;		_Seg_Display
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           
  2812                           ;psect for function ___wmul
  2813  058B                     ___wmul:	
  2814                           
  2815                           ;incstack = 0
  2816                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2817  058B  01F6               	clrf	___wmul@product
  2818  058C  01F7               	clrf	___wmul@product+1
  2819  058D                     l3828:	
  2820  058D  1C72               	btfss	___wmul@multiplier,0
  2821  058E  2D95               	goto	l3832
  2822  058F  0874               	movf	___wmul@multiplicand,w
  2823  0590  07F6               	addwf	___wmul@product,f
  2824  0591  1803               	skipnc
  2825  0592  0AF7               	incf	___wmul@product+1,f
  2826  0593  0875               	movf	___wmul@multiplicand+1,w
  2827  0594  07F7               	addwf	___wmul@product+1,f
  2828  0595                     l3832:	
  2829  0595  1003               	clrc
  2830  0596  0DF4               	rlf	___wmul@multiplicand,f
  2831  0597  0DF5               	rlf	___wmul@multiplicand+1,f
  2832  0598  1003               	clrc
  2833  0599  0CF3               	rrf	___wmul@multiplier+1,f
  2834  059A  0CF2               	rrf	___wmul@multiplier,f
  2835  059B  0872               	movf	___wmul@multiplier,w
  2836  059C  0473               	iorwf	___wmul@multiplier+1,w
  2837  059D  1D03               	btfss	3,2
  2838  059E  2D8D               	goto	l3828
  2839  059F  0877               	movf	___wmul@product+1,w
  2840  05A0  00F3               	movwf	?___wmul+1
  2841  05A1  0876               	movf	___wmul@product,w
  2842  05A2  00F2               	movwf	?___wmul
  2843  05A3  0008               	return
  2844  05A4                     __end_of___wmul:	
  2845                           
  2846                           	psect	text16
  2847  0462                     __ptext16:	
  2848 ;; *************** function ___lwdiv *****************
  2849 ;; Defined at:
  2850 ;;		line 6 in file "f:\doc\datesheet\mcu\pf\ide3.0.1_200917\data\sources\common\lwdiv.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  divisor         2    0[BANK0 ] unsigned int 
  2853 ;;  dividend        2    2[BANK0 ] unsigned int 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  quotient        2    5[BANK0 ] unsigned int 
  2856 ;;  counter         1    4[BANK0 ] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  2    0[BANK0 ] unsigned int 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0
  2861 ;; Tracked objects:
  2862 ;;		On entry : 300/0
  2863 ;;		On exit  : 300/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1
  2866 ;;      Params:         0       4       0
  2867 ;;      Locals:         0       3       0
  2868 ;;      Temps:          0       0       0
  2869 ;;      Totals:         0       7       0
  2870 ;;Total ram usage:        7 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    1
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_Sola_checkFuc
  2877 ;;		_GLO_cdsCheckFuc
  2878 ;;		_Solar_BaseDefine
  2879 ;;		_main
  2880 ;;		_Seg_Display
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           
  2885                           ;psect for function ___lwdiv
  2886  0462                     ___lwdiv:	
  2887                           
  2888                           ;incstack = 0
  2889                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2890  0462  01A5               	clrf	___lwdiv@quotient
  2891  0463  01A6               	clrf	___lwdiv@quotient+1
  2892  0464  0820               	movf	___lwdiv@divisor,w
  2893  0465  0421               	iorwf	___lwdiv@divisor+1,w
  2894  0466  1903               	btfsc	3,2
  2895  0467  2C87               	goto	l3864
  2896  0468  01A4               	clrf	___lwdiv@counter
  2897  0469                     L5:	
  2898  0469  0AA4               	incf	___lwdiv@counter,f
  2899  046A  1BA1               	btfsc	___lwdiv@divisor+1,7
  2900  046B  2C70               	goto	l3852
  2901  046C  1003               	clrc
  2902  046D  0DA0               	rlf	___lwdiv@divisor,f
  2903  046E  0DA1               	rlf	___lwdiv@divisor+1,f
  2904  046F  2C69               	goto	L5
  2905  0470                     l3852:	
  2906  0470  1003               	clrc
  2907  0471  0DA5               	rlf	___lwdiv@quotient,f
  2908  0472  0DA6               	rlf	___lwdiv@quotient+1,f
  2909  0473  0821               	movf	___lwdiv@divisor+1,w
  2910  0474  0223               	subwf	___lwdiv@dividend+1,w
  2911  0475  1D03               	skipz
  2912  0476  2C79               	goto	u2655
  2913  0477  0820               	movf	___lwdiv@divisor,w
  2914  0478  0222               	subwf	___lwdiv@dividend,w
  2915  0479                     u2655:	
  2916  0479  1C03               	skipc
  2917  047A  2C83               	goto	L6
  2918  047B  0820               	movf	___lwdiv@divisor,w
  2919  047C  02A2               	subwf	___lwdiv@dividend,f
  2920  047D  0821               	movf	___lwdiv@divisor+1,w
  2921  047E  1C03               	skipc
  2922  047F  03A3               	decf	___lwdiv@dividend+1,f
  2923  0480  02A3               	subwf	___lwdiv@dividend+1,f
  2924  0481  1425               	bsf	___lwdiv@quotient,0
  2925  0482  1003               	clrc
  2926  0483                     L6:	
  2927  0483  0CA1               	rrf	___lwdiv@divisor+1,f
  2928  0484  0CA0               	rrf	___lwdiv@divisor,f
  2929  0485  0BA4               	decfsz	___lwdiv@counter,f
  2930  0486  2C70               	goto	l3852
  2931  0487                     l3864:	
  2932  0487  0826               	movf	___lwdiv@quotient+1,w
  2933  0488  00A1               	movwf	?___lwdiv+1
  2934  0489  0825               	movf	___lwdiv@quotient,w
  2935  048A  00A0               	movwf	?___lwdiv
  2936  048B  0008               	return
  2937  048C                     __end_of___lwdiv:	
  2938                           
  2939                           	psect	text17
  2940  003B                     __ptext17:	
  2941 ;; *************** function _Event_checkFuc *****************
  2942 ;; Defined at:
  2943 ;;		line 822 in file "main.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 300/0
  2954 ;;		On exit  : 200/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1
  2957 ;;      Params:         0       0       0
  2958 ;;      Locals:         0       0       0
  2959 ;;      Temps:          0       0       0
  2960 ;;      Totals:         0       0       0
  2961 ;;Total ram usage:        0 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    3
  2964 ;; This function calls:
  2965 ;;		_DelayMs
  2966 ;;		_TIMER1_INTSTART
  2967 ;;		_TIMER1_INTSTOP
  2968 ;;		_eventEnterOFF
  2969 ;;		_eventExitOFF
  2970 ;; This function is called by:
  2971 ;;		_main
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           
  2976                           ;psect for function _Event_checkFuc
  2977  003B                     _Event_checkFuc:	
  2978                           
  2979                           ;main.c: 827: if((g_checkMode != OFF_MODE) && (g_event_t == OFF_MODE))
  2980                           
  2981                           ;incstack = 0
  2982                           ; Regs used in _Event_checkFuc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2983  003B  0847               	movf	_g_checkMode,w	;volatile
  2984  003C  1903               	btfsc	3,2
  2985  003D  292A               	goto	l4154
  2986  003E  0846               	movf	_g_event_t,w	;volatile
  2987  003F  1D03               	btfss	3,2
  2988  0040  292A               	goto	l4154
  2989                           
  2990                           ;main.c: 828: eventExitOFF();
  2991  0041  25FE               	fcall	_eventExitOFF
  2992  0042  292A               	goto	l4154
  2993  0043                     l1194:	
  2994                           ;main.c: 846: do{TRISC3 = 0;PC3=0;}while(0);;
  2995                           
  2996  0043  1683               	bsf	3,5	;RP0=1, select bank1
  2997  0044  1187               	bcf	7,3	;volatile
  2998  0045  1283               	bcf	3,5	;RP0=0, select bank0
  2999  0046  1187               	bcf	7,3	;volatile
  3000                           
  3001                           ;main.c: 847: g_event_t = OFF_MODE;
  3002  0047  01C6               	clrf	_g_event_t	;volatile
  3003                           
  3004                           ;main.c: 850: PC5 = 0;
  3005  0048  1287               	bcf	7,5	;volatile
  3006  0049  1F05               	btfss	5,6	;volatile
  3007  004A  284D               	goto	l3956
  3008  004B  1305               	bcf	5,6	;volatile
  3009  004C  01E9               	clrf	_g_gloCntTimer	;volatile
  3010  004D                     l3956:	
  3011                           
  3012                           ;main.c: 852: eventEnterOFF();
  3013  004D  2DCC               	ljmp	l3782
  3014  004E                     l1203:	
  3015                           ;main.c: 855: do{if(PA6){ PA6 = 0; do{ g_gloCntTimer = 0;}while(0);;} }while(0);;
  3016                           
  3017                           ;main.c: 853: break;
  3018                           
  3019  004E  1F05               	btfss	5,6	;volatile
  3020  004F  2852               	goto	l3962
  3021  0050  1305               	bcf	5,6	;volatile
  3022  0051  01E9               	clrf	_g_gloCntTimer	;volatile
  3023  0052                     l3962:	
  3024                           
  3025                           ;main.c: 857: g_event_t = OFF2HI_MODE;
  3026  0052  3001               	movlw	1
  3027  0053  00C6               	movwf	_g_event_t	;volatile
  3028                           
  3029                           ;main.c: 858: if(((g_checkStBits) & (0B00000010)))
  3030  0054  1CE8               	btfss	_g_checkStBits,1	;volatile
  3031  0055  0008               	return
  3032                           
  3033                           ;main.c: 859: {
  3034                           ;main.c: 860: TRISC3 = 1;
  3035  0056  1683               	bsf	3,5	;RP0=1, select bank1
  3036  0057  1587               	bsf	7,3	;volatile
  3037                           
  3038                           ;main.c: 861: if(PA7)
  3039  0058  1283               	bcf	3,5	;RP0=0, select bank0
  3040  0059  1F85               	btfss	5,7	;volatile
  3041  005A  0008               	return
  3042                           
  3043                           ;main.c: 862: {
  3044                           ;main.c: 863: PC5 = 1;
  3045                           
  3046                           ;main.c: 866: g_ledkeep = 9000;
  3047  005B  213F               	fcall	PL20	;call to abstracted procedure
  3048                           
  3049                           ;main.c: 867: TIMER1_INTSTART();
  3050  005C  25DC               	fcall	_TIMER1_INTSTART
  3051  005D  1683               	bsf	3,5	;RP0=1, select bank1
  3052  005E  1505               	bsf	5,2	;volatile
  3053  005F  1515               	bsf	21,2	;volatile
  3054  0060                     l1212:	
  3055                           ;main.c: 869: while(1)
  3056                           
  3057  0060  0064               	clrwdt	;# 
  3058                           
  3059                           ;main.c: 872: DelayMs(2);
  3060  0061  3002               	movlw	2
  3061  0062  25B9               	fcall	_DelayMs
  3062                           
  3063                           ;main.c: 873: if(PA7)
  3064  0063  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0064  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0065  1F85               	btfss	5,7	;volatile
  3067  0066  286F               	goto	l3986
  3068                           
  3069                           ;main.c: 874: {
  3070                           ;main.c: 875: if(g_ledkeep < (9000-1000))
  3071  0067  301F               	movlw	31
  3072  0068  027B               	subwf	_g_ledkeep+1,w	;volatile
  3073  0069  3040               	movlw	64
  3074  006A  1903               	skipnz
  3075  006B  027A               	subwf	_g_ledkeep,w	;volatile
  3076  006C  1803               	skipnc
  3077  006D  286F               	goto	l3986
  3078                           
  3079                           ;main.c: 876: g_ledkeep = 9000;
  3080  006E  2145               	fcall	PL24	;call to abstracted procedure
  3081  006F                     l3986:	
  3082                           
  3083                           ;main.c: 877: }
  3084                           ;main.c: 878: if(g_ledkeep == 0)
  3085  006F  087A               	movf	_g_ledkeep,w	;volatile
  3086  0070  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3087  0071  1903               	btfsc	3,2
  3088  0072  287B               	goto	l3996
  3089                           
  3090                           ;main.c: 880: if(PA2)
  3091  0073  1D05               	btfss	5,2	;volatile
  3092  0074  2860               	goto	l1212
  3093                           
  3094                           ;main.c: 881: {
  3095                           ;main.c: 882: DelayMs(10);
  3096  0075  300A               	movlw	10
  3097  0076  25B9               	fcall	_DelayMs
  3098                           
  3099                           ;main.c: 883: if(PA2)
  3100  0077  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0078  1303               	bcf	3,6	;RP1=0, select bank0
  3102  0079  1D05               	btfss	5,2	;volatile
  3103  007A  2860               	goto	l1212
  3104  007B                     l3996:	
  3105                           
  3106                           ;main.c: 885: }
  3107                           ;main.c: 886: }
  3108                           ;main.c: 888: if(g_ledkeep == 0)
  3109  007B  087A               	movf	_g_ledkeep,w	;volatile
  3110  007C  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3111  007D  1D03               	btfss	3,2
  3112  007E  28A7               	goto	l1220
  3113                           
  3114                           ;main.c: 889: {
  3115                           ;main.c: 890: g_ledkeep = 1000;
  3116  007F  2136               	fcall	PL4	;call to abstracted procedure
  3117  0080                     l1223:	
  3118                           ;main.c: 892: while(1)
  3119                           
  3120  0080  0064               	clrwdt	;# 
  3121                           
  3122                           ;main.c: 895: DelayMs(2);
  3123  0081  3002               	movlw	2
  3124  0082  25B9               	fcall	_DelayMs
  3125                           
  3126                           ;main.c: 896: if(g_ledkeep == 0)break;
  3127                           
  3128                           ;main.c: 897: if(PA2)
  3129  0083  2154               	fcall	PL32	;call to abstracted procedure
  3130  0084  1903               	btfsc	3,2
  3131  0085  2890               	goto	L9
  3132  0086  1D05               	btfss	5,2	;volatile
  3133  0087  2880               	goto	l1223
  3134                           
  3135                           ;main.c: 898: {
  3136                           ;main.c: 899: DelayMs(10);
  3137  0088  300A               	movlw	10
  3138  0089  25B9               	fcall	_DelayMs
  3139                           
  3140                           ;main.c: 900: if(PA2)break;
  3141  008A  1283               	bcf	3,5	;RP0=0, select bank0
  3142  008B  1303               	bcf	3,6	;RP1=0, select bank0
  3143  008C  1D05               	btfss	5,2	;volatile
  3144  008D  2880               	goto	l1223
  3145                           
  3146                           ;main.c: 901: }
  3147                           ;main.c: 902: }
  3148                           ;main.c: 903: PC5 = 0;
  3149  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3150  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0090                     L9:	
  3152  0090  1287               	bcf	7,5	;volatile
  3153                           
  3154                           ;main.c: 905: g_ledkeep = 700;
  3155  0091  214A               	fcall	PL28	;call to abstracted procedure
  3156  0092                     l1229:	
  3157                           ;main.c: 906: while(1)
  3158                           
  3159  0092  0064               	clrwdt	;# 
  3160                           
  3161                           ;main.c: 909: DelayMs(2);
  3162  0093  3002               	movlw	2
  3163  0094  25B9               	fcall	_DelayMs
  3164                           
  3165                           ;main.c: 910: if(g_ledkeep == 0)break;
  3166  0095  087A               	movf	_g_ledkeep,w	;volatile
  3167  0096  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3168  0097  1903               	btfsc	3,2
  3169  0098  28A3               	goto	l1231
  3170                           
  3171                           ;main.c: 911: if(PA2)
  3172  0099  1283               	bcf	3,5	;RP0=0, select bank0
  3173  009A  1303               	bcf	3,6	;RP1=0, select bank0
  3174  009B  1D05               	btfss	5,2	;volatile
  3175  009C  2892               	goto	l1229
  3176                           
  3177                           ;main.c: 912: {
  3178                           ;main.c: 913: DelayMs(10);
  3179  009D  300A               	movlw	10
  3180  009E  25B9               	fcall	_DelayMs
  3181                           
  3182                           ;main.c: 914: if(PA2)break;
  3183  009F  1283               	bcf	3,5	;RP0=0, select bank0
  3184  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  3185  00A1  1D05               	btfss	5,2	;volatile
  3186  00A2  2892               	goto	l1229
  3187  00A3                     l1231:	
  3188                           
  3189                           ;main.c: 915: }
  3190                           ;main.c: 916: }
  3191                           ;main.c: 918: TRISC3 = 1;
  3192  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  3193  00A4  1303               	bcf	3,6	;RP1=0, select bank1
  3194  00A5  1587               	bsf	7,3	;volatile
  3195                           
  3196                           ;main.c: 919: }
  3197  00A6  28A8               	goto	l1236
  3198  00A7                     l1220:	
  3199                           
  3200                           ;main.c: 920: else
  3201                           ;main.c: 921: {
  3202                           ;main.c: 923: PC5 = 0;
  3203  00A7  1287               	bcf	7,5	;volatile
  3204  00A8                     l1236:	
  3205                           ;main.c: 924: }
  3206                           ;main.c: 926: do{TRISA2=0;PA2=0;}while(0);;
  3207                           
  3208  00A8  1683               	bsf	3,5	;RP0=1, select bank1
  3209  00A9  1105               	bcf	5,2	;volatile
  3210  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  3211  00AB  1105               	bcf	5,2	;volatile
  3212  00AC                     l4030:	
  3213                           
  3214                           ;main.c: 927: TIMER1_INTSTOP();
  3215  00AC  2E38               	ljmp	l3762
  3216  00AD                     l1238:	
  3217                           ;main.c: 933: case GLO2HI_MODE:
  3218                           
  3219                           
  3220                           ;main.c: 935: PC5 = 0;
  3221  00AD  1287               	bcf	7,5	;volatile
  3222                           
  3223                           ;main.c: 936: g_event_t = GLO2HI_MODE;
  3224  00AE  3002               	movlw	2
  3225  00AF  00C6               	movwf	_g_event_t	;volatile
  3226                           
  3227                           ;main.c: 937: if(((g_checkStBits) & (0B00000010)))
  3228  00B0  1CE8               	btfss	_g_checkStBits,1	;volatile
  3229  00B1  291B               	goto	l1291
  3230                           
  3231                           ;main.c: 938: {
  3232                           ;main.c: 939: TRISC3 = 1;
  3233  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  3234  00B3  1587               	bsf	7,3	;volatile
  3235                           
  3236                           ;main.c: 940: if(PA7)
  3237  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  3238  00B5  1F85               	btfss	5,7	;volatile
  3239  00B6  2914               	goto	L8
  3240                           
  3241                           ;main.c: 941: {
  3242                           ;main.c: 942: do{if(PA6){ PA6 = 0; do{ g_gloCntTimer = 0;}while(0);;} }while(0);;
  3243  00B7  1F05               	btfss	5,6	;volatile
  3244  00B8  28BB               	goto	l4042
  3245  00B9  1305               	bcf	5,6	;volatile
  3246  00BA  01E9               	clrf	_g_gloCntTimer	;volatile
  3247  00BB                     l4042:	
  3248                           
  3249                           ;main.c: 943: PC5 = 1;
  3250                           
  3251                           ;main.c: 944: g_ledkeep = 9000;
  3252  00BB  213F               	fcall	PL20	;call to abstracted procedure
  3253                           
  3254                           ;main.c: 945: TIMER1_INTSTART();
  3255  00BC  25DC               	fcall	_TIMER1_INTSTART
  3256  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  3257  00BE  1585               	bsf	5,3	;volatile
  3258  00BF  1595               	bsf	21,3	;volatile
  3259  00C0                     l1248:	
  3260                           ;main.c: 947: while(1)
  3261                           
  3262  00C0  0064               	clrwdt	;# 
  3263                           
  3264                           ;main.c: 950: DelayMs(2);
  3265  00C1  3002               	movlw	2
  3266  00C2  25B9               	fcall	_DelayMs
  3267                           
  3268                           ;main.c: 951: if(PA7)
  3269  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  3270  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  3271  00C5  1F85               	btfss	5,7	;volatile
  3272  00C6  28CF               	goto	l4060
  3273                           
  3274                           ;main.c: 952: {
  3275                           ;main.c: 953: if(g_ledkeep < (9000-1000))
  3276  00C7  301F               	movlw	31
  3277  00C8  027B               	subwf	_g_ledkeep+1,w	;volatile
  3278  00C9  3040               	movlw	64
  3279  00CA  1903               	skipnz
  3280  00CB  027A               	subwf	_g_ledkeep,w	;volatile
  3281  00CC  1803               	skipnc
  3282  00CD  28CF               	goto	l4060
  3283                           
  3284                           ;main.c: 954: g_ledkeep = 9000;
  3285  00CE  2145               	fcall	PL24	;call to abstracted procedure
  3286  00CF                     l4060:	
  3287                           
  3288                           ;main.c: 955: }
  3289                           ;main.c: 956: if(g_ledkeep == 0)
  3290  00CF  087A               	movf	_g_ledkeep,w	;volatile
  3291  00D0  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3292  00D1  1903               	btfsc	3,2
  3293  00D2  28DB               	goto	l4070
  3294                           
  3295                           ;main.c: 958: if(PA3)
  3296  00D3  1D85               	btfss	5,3	;volatile
  3297  00D4  28C0               	goto	l1248
  3298                           
  3299                           ;main.c: 959: {
  3300                           ;main.c: 960: DelayMs(10);
  3301  00D5  300A               	movlw	10
  3302  00D6  25B9               	fcall	_DelayMs
  3303                           
  3304                           ;main.c: 961: if(PA3)
  3305  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  3306  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  3307  00D9  1D85               	btfss	5,3	;volatile
  3308  00DA  28C0               	goto	l1248
  3309  00DB                     l4070:	
  3310                           
  3311                           ;main.c: 963: }
  3312                           ;main.c: 964: }
  3313                           ;main.c: 967: if(g_ledkeep == 0)
  3314  00DB  087A               	movf	_g_ledkeep,w	;volatile
  3315  00DC  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3316  00DD  1D03               	btfss	3,2
  3317  00DE  290A               	goto	l1256
  3318                           
  3319                           ;main.c: 968: {
  3320                           ;main.c: 969: g_ledkeep = 1000;
  3321  00DF  2136               	fcall	PL4	;call to abstracted procedure
  3322  00E0                     l1259:	
  3323                           ;main.c: 971: while(1)
  3324                           
  3325  00E0  0064               	clrwdt	;# 
  3326                           
  3327                           ;main.c: 974: DelayMs(2);
  3328  00E1  3002               	movlw	2
  3329  00E2  25B9               	fcall	_DelayMs
  3330                           
  3331                           ;main.c: 975: if(g_ledkeep == 0)break;
  3332                           
  3333                           ;main.c: 976: if(PA2)
  3334  00E3  2154               	fcall	PL32	;call to abstracted procedure
  3335  00E4  1903               	btfsc	3,2
  3336  00E5  28F0               	goto	L10
  3337  00E6  1D05               	btfss	5,2	;volatile
  3338  00E7  28E0               	goto	l1259
  3339                           
  3340                           ;main.c: 977: {
  3341                           ;main.c: 978: DelayMs(10);
  3342  00E8  300A               	movlw	10
  3343  00E9  25B9               	fcall	_DelayMs
  3344                           
  3345                           ;main.c: 979: if(PA2)break;
  3346  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  3347  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  3348  00EC  1D05               	btfss	5,2	;volatile
  3349  00ED  28E0               	goto	l1259
  3350                           
  3351                           ;main.c: 980: }
  3352                           ;main.c: 981: }
  3353                           ;main.c: 982: PC5 = 0;
  3354  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  3355  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  3356  00F0                     L10:	
  3357  00F0  1287               	bcf	7,5	;volatile
  3358                           
  3359                           ;main.c: 983: do{if(!PA6){ PA6 = 1; do{ g_gloCntTimer = 0; g_gloCntTimer |= 0x82;}while(
      +                          0);;} }while(0);;
  3360  00F1  1B05               	btfsc	5,6	;volatile
  3361  00F2  28F4               	goto	l4096
  3362  00F3  214F               	fcall	PL30	;call to abstracted procedure
  3363  00F4                     l4096:	
  3364                           
  3365                           ;main.c: 986: g_ledkeep = 700;
  3366  00F4  214A               	fcall	PL28	;call to abstracted procedure
  3367  00F5                     l1270:	
  3368                           ;main.c: 987: while(1)
  3369                           
  3370  00F5  0064               	clrwdt	;# 
  3371                           
  3372                           ;main.c: 990: DelayMs(2);
  3373  00F6  3002               	movlw	2
  3374  00F7  25B9               	fcall	_DelayMs
  3375                           
  3376                           ;main.c: 991: if(g_ledkeep == 0)break;
  3377  00F8  087A               	movf	_g_ledkeep,w	;volatile
  3378  00F9  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3379  00FA  1903               	btfsc	3,2
  3380  00FB  2906               	goto	l1272
  3381                           
  3382                           ;main.c: 992: if(PA3)
  3383  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  3384  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  3385  00FE  1D85               	btfss	5,3	;volatile
  3386  00FF  28F5               	goto	l1270
  3387                           
  3388                           ;main.c: 993: {
  3389                           ;main.c: 994: DelayMs(10);
  3390  0100  300A               	movlw	10
  3391  0101  25B9               	fcall	_DelayMs
  3392                           
  3393                           ;main.c: 995: if(PA3)break;
  3394  0102  1283               	bcf	3,5	;RP0=0, select bank0
  3395  0103  1303               	bcf	3,6	;RP1=0, select bank0
  3396  0104  1D85               	btfss	5,3	;volatile
  3397  0105  28F5               	goto	l1270
  3398  0106                     l1272:	
  3399                           
  3400                           ;main.c: 996: }
  3401                           ;main.c: 997: }
  3402                           ;main.c: 998: TRISC3 = 1;
  3403  0106  1683               	bsf	3,5	;RP0=1, select bank1
  3404  0107  1303               	bcf	3,6	;RP1=0, select bank1
  3405  0108  1587               	bsf	7,3	;volatile
  3406                           
  3407                           ;main.c: 999: }
  3408  0109  290E               	goto	l4116
  3409  010A                     l1256:	
  3410                           
  3411                           ;main.c: 1000: else{
  3412                           ;main.c: 1001: PC5 = 0;
  3413  010A  1287               	bcf	7,5	;volatile
  3414                           
  3415                           ;main.c: 1002: do{if(!PA6){ PA6 = 1; do{ g_gloCntTimer = 0; g_gloCntTimer |= 0x82;}while
      +                          (0);;} }while(0);;
  3416  010B  1B05               	btfsc	5,6	;volatile
  3417  010C  290E               	goto	l4116
  3418  010D  214F               	fcall	PL30	;call to abstracted procedure
  3419  010E                     l4116:	
  3420  010E  1683               	bsf	3,5	;RP0=1, select bank1
  3421  010F  1185               	bcf	5,3	;volatile
  3422  0110  1283               	bcf	3,5	;RP0=0, select bank0
  3423  0111  1185               	bcf	5,3	;volatile
  3424  0112  28AC               	goto	l4030
  3425  0113                     l4140:	
  3426                           ;main.c: 1009: {
  3427                           ;main.c: 1010: do{if(!PA6){ PA6 = 1; do{ g_gloCntTimer = 0; g_gloCntTimer |= 0x82;}while
      +                          (0);;} }while(0);;
  3428                           
  3429                           
  3430                           ;main.c: 1025: {
  3431                           ;main.c: 1026: PC5 = 0;
  3432  0113  1287               	bcf	7,5	;volatile
  3433  0114                     L8:	
  3434                           
  3435                           ;main.c: 1027: do{if(!PA6){ PA6 = 1; do{ g_gloCntTimer = 0; g_gloCntTimer |= 0x82;}while
      +                          (0);;} }while(0);;
  3436  0114  1B05               	btfsc	5,6	;volatile
  3437  0115  0008               	return
  3438  0116  1705               	bsf	5,6	;volatile
  3439  0117  01E9               	clrf	_g_gloCntTimer	;volatile
  3440  0118  3082               	movlw	130
  3441  0119  04E9               	iorwf	_g_gloCntTimer,f	;volatile
  3442  011A  0008               	return
  3443  011B                     l1291:	
  3444                           ;main.c: 1013: {
  3445                           ;main.c: 1014: do{if(PA6){ PA6 = 0; do{ g_gloCntTimer = 0;}while(0);;} }while(0);;
  3446                           
  3447  011B  1F05               	btfss	5,6	;volatile
  3448  011C  0008               	return
  3449  011D  1305               	bcf	5,6	;volatile
  3450  011E  01E9               	clrf	_g_gloCntTimer	;volatile
  3451  011F  0008               	return
  3452  0120                     l1296:	
  3453                           ;main.c: 1018: case GLO_MODE:
  3454                           
  3455                           
  3456                           ;main.c: 1021: PC5 = 0;
  3457  0120  1287               	bcf	7,5	;volatile
  3458                           
  3459                           ;main.c: 1022: g_event_t = GLO_MODE;
  3460  0121  3003               	movlw	3
  3461  0122  00C6               	movwf	_g_event_t	;volatile
  3462  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3463  0124  1187               	bcf	7,3	;volatile
  3464  0125  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0126  1187               	bcf	7,3	;volatile
  3466                           
  3467                           ;main.c: 1024: if(((g_checkStBits) & (0B00000010)))
  3468  0127  18E8               	btfsc	_g_checkStBits,1	;volatile
  3469  0128  2913               	goto	l4140
  3470  0129  291B               	goto	l1291
  3471  012A                     l4154:	
  3472                           ;main.c: 1029: {
  3473                           ;main.c: 1030: do{if(PA6){ PA6 = 0; do{ g_gloCntTimer = 0;}while(0);;} }while(0);;
  3474                           
  3475  012A  0847               	movf	_g_checkMode,w	;volatile
  3476                           
  3477                           ; Switch size 1, requested type "space"
  3478                           ; Number of cases is 4, Range of values is 0 to 3
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; direct_byte           10     6 (fixed)
  3482                           ; simple_byte           13     7 (average)
  3483                           ; jumptable            260     6 (fixed)
  3484                           ;	Chosen strategy is direct_byte
  3485  012B  0084               	movwf	4
  3486  012C  3004               	movlw	4
  3487  012D  0204               	subwf	4,w
  3488  012E  1803               	skipnc
  3489  012F  0008               	return
  3490  0130  3006               	movlw	high S4612
  3491  0131  008A               	movwf	10
  3492  0132  303E               	movlw	low S4612
  3493  0133  0704               	addwf	4,w
  3494  0134  0082               	movwf	2
  3495  0135  0008               	return
  3496  0136                     __end_of_Event_checkFuc:	
  3497  0136                     PL4:	
  3498  0136  30E8               	movlw	232
  3499  0137  00FA               	movwf	_g_ledkeep	;volatile
  3500  0138  3003               	movlw	3
  3501  0139  00FB               	movwf	_g_ledkeep+1	;volatile
  3502  013A  1683               	bsf	3,5	;RP0=1, select bank1
  3503  013B  1187               	bcf	7,3	;volatile
  3504  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3505  013D  1187               	bcf	7,3	;volatile
  3506  013E  0008               	return
  3507  013F                     __end_ofPL4:	
  3508  013F                     PL20:	
  3509  013F  1687               	bsf	7,5	;volatile
  3510  0140  3028               	movlw	40
  3511  0141  00FA               	movwf	_g_ledkeep	;volatile
  3512  0142  3023               	movlw	35
  3513  0143  00FB               	movwf	_g_ledkeep+1	;volatile
  3514  0144  0008               	return
  3515  0145                     __end_ofPL20:	
  3516  0145                     PL24:	
  3517  0145  3028               	movlw	40
  3518  0146  00FA               	movwf	_g_ledkeep	;volatile
  3519  0147  3023               	movlw	35
  3520  0148  00FB               	movwf	_g_ledkeep+1	;volatile
  3521  0149  0008               	return
  3522  014A                     __end_ofPL24:	
  3523  014A                     PL28:	
  3524  014A  30BC               	movlw	188
  3525  014B  00FA               	movwf	_g_ledkeep	;volatile
  3526  014C  3002               	movlw	2
  3527  014D  00FB               	movwf	_g_ledkeep+1	;volatile
  3528  014E  0008               	return
  3529  014F                     __end_ofPL28:	
  3530  014F                     PL30:	
  3531  014F  1705               	bsf	5,6	;volatile
  3532  0150  01E9               	clrf	_g_gloCntTimer	;volatile
  3533  0151  3082               	movlw	130
  3534  0152  04E9               	iorwf	_g_gloCntTimer,f	;volatile
  3535  0153  0008               	return
  3536  0154                     __end_ofPL30:	
  3537  0154                     PL32:	
  3538  0154  087A               	movf	_g_ledkeep,w	;volatile
  3539  0155  047B               	iorwf	_g_ledkeep+1,w	;volatile
  3540  0156  1283               	bcf	3,5	;RP0=0, select bank0
  3541  0157  1303               	bcf	3,6	;RP1=0, select bank0
  3542  0158  0008               	return
  3543  0159                     __end_ofPL32:	
  3544                           
  3545                           	psect	swtext1
  3546  063E                     __pswtext1:	
  3547  063E                     S4612:	
  3548  063E  2843               	ljmp	l1194
  3549  063F  284E               	ljmp	l1203
  3550  0640  28AD               	ljmp	l1238
  3551  0641  2920               	ljmp	l1296
  3552                           
  3553                           	psect	text18
  3554  05FE                     __ptext18:	
  3555 ;; *************** function _eventExitOFF *****************
  3556 ;; Defined at:
  3557 ;;		line 647 in file "main.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  ReadAPin        1    0        unsigned char 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0, pclath, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 300/0
  3568 ;;		On exit  : 300/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1
  3571 ;;      Params:         0       0       0
  3572 ;;      Locals:         0       0       0
  3573 ;;      Temps:          0       0       0
  3574 ;;      Totals:         0       0       0
  3575 ;;Total ram usage:        0 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    2
  3578 ;; This function calls:
  3579 ;;		_WDT_INITIAL
  3580 ;; This function is called by:
  3581 ;;		_Event_checkFuc
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           
  3586                           ;psect for function _eventExitOFF
  3587  05FE                     _eventExitOFF:	
  3588                           
  3589                           ;main.c: 649: unsigned char ReadAPin;
  3590                           ;main.c: 651: WDT_INITIAL();
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in _eventExitOFF: [wreg+status,2+status,0+pclath+cstack]
  3594  05FE  2607               	fcall	_WDT_INITIAL
  3595                           
  3596                           ;main.c: 652: IOCA |= 0B10000000;
  3597  05FF  1683               	bsf	3,5	;RP0=1, select bank1
  3598  0600  1796               	bsf	22,7	;volatile
  3599                           
  3600                           ;main.c: 653: ReadAPin = PORTA;
  3601  0601  1283               	bcf	3,5	;RP0=0, select bank0
  3602  0602  0805               	movf	5,w	;volatile
  3603                           
  3604                           ;main.c: 654: PAIF = 0;
  3605  0603  100B               	bcf	11,0	;volatile
  3606                           
  3607                           ;main.c: 656: INTF =0;
  3608  0604  108B               	bcf	11,1	;volatile
  3609                           
  3610                           ;main.c: 657: INTE =0;
  3611  0605  120B               	bcf	11,4	;volatile
  3612  0606  2C2E               	ljmp	PL2	;call to abstracted procedure
  3613  0607                     __end_of_eventExitOFF:	
  3614                           
  3615                           	psect	text19
  3616  0607                     __ptext19:	
  3617 ;; *************** function _WDT_INITIAL *****************
  3618 ;; Defined at:
  3619 ;;		line 573 in file "main.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg
  3628 ;; Tracked objects:
  3629 ;;		On entry : 300/0
  3630 ;;		On exit  : 300/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1
  3633 ;;      Params:         0       0       0
  3634 ;;      Locals:         0       0       0
  3635 ;;      Temps:          0       0       0
  3636 ;;      Totals:         0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    1
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_eventExitOFF
  3644 ;;		_main
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           
  3649                           ;psect for function _WDT_INITIAL
  3650  0607                     _WDT_INITIAL:	
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in _WDT_INITIAL: [wreg]
  3654  0607  0064               	clrwdt	;# 
  3655                           
  3656                           ;main.c: 577: PSA = 0;
  3657  0608  1683               	bsf	3,5	;RP0=1, select bank1
  3658  0609  1303               	bcf	3,6	;RP1=0, select bank1
  3659  060A  1181               	bcf	1,3	;volatile
  3660                           
  3661                           ;main.c: 578: WDTCON = 0B00010010;
  3662  060B  3012               	movlw	18
  3663  060C  1283               	bcf	3,5	;RP0=0, select bank0
  3664  060D  0098               	movwf	24	;volatile
  3665                           
  3666                           ;main.c: 580: SWDTEN = 1;
  3667  060E  1418               	bsf	24,0	;volatile
  3668  060F  0008               	return
  3669  0610                     __end_of_WDT_INITIAL:	
  3670                           
  3671                           	psect	text20
  3672  05CC                     __ptext20:	
  3673 ;; *************** function _eventEnterOFF *****************
  3674 ;; Defined at:
  3675 ;;		line 618 in file "main.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  ReadAPin        1    0        unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0
  3684 ;; Tracked objects:
  3685 ;;		On entry : 300/0
  3686 ;;		On exit  : 300/100
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMMON   BANK0   BANK1
  3689 ;;      Params:         0       0       0
  3690 ;;      Locals:         0       0       0
  3691 ;;      Temps:          0       0       0
  3692 ;;      Totals:         0       0       0
  3693 ;;Total ram usage:        0 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    1
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_Event_checkFuc
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           
  3704                           ;psect for function _eventEnterOFF
  3705  05CC                     _eventEnterOFF:	
  3706  05CC                     l3782:	
  3707                           ;incstack = 0
  3708                           ; Regs used in _eventEnterOFF: [wreg+status,2+status,0]
  3709                           
  3710  05CC  0064               	clrwdt	;# 
  3711                           
  3712                           ;main.c: 624: SWDTEN = 0;
  3713  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  3714  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  3715  05CF  1018               	bcf	24,0	;volatile
  3716                           
  3717                           ;main.c: 626: IOCA &= 0B01111111;
  3718  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  3719  05D1  1396               	bcf	22,7	;volatile
  3720                           
  3721                           ;main.c: 628: ReadAPin = PORTA;
  3722  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  3723  05D3  0805               	movf	5,w	;volatile
  3724                           
  3725                           ;main.c: 629: PAIF = 0;
  3726  05D4  100B               	bcf	11,0	;volatile
  3727                           
  3728                           ;main.c: 631: INTF =0;
  3729  05D5  108B               	bcf	11,1	;volatile
  3730                           
  3731                           ;main.c: 632: INTE =1;
  3732  05D6  160B               	bsf	11,4	;volatile
  3733  05D7  301C               	movlw	28
  3734  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  3735  05D9  0485               	iorwf	5,f	;volatile
  3736  05DA  0495               	iorwf	21,f	;volatile
  3737  05DB  0008               	return
  3738  05DC                     __end_of_eventEnterOFF:	
  3739                           
  3740                           	psect	text21
  3741  0638                     __ptext21:	
  3742 ;; *************** function _TIMER1_INTSTOP *****************
  3743 ;; Defined at:
  3744 ;;		line 453 in file "main.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		None
  3753 ;; Tracked objects:
  3754 ;;		On entry : 300/0
  3755 ;;		On exit  : 300/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1
  3758 ;;      Params:         0       0       0
  3759 ;;      Locals:         0       0       0
  3760 ;;      Temps:          0       0       0
  3761 ;;      Totals:         0       0       0
  3762 ;;Total ram usage:        0 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    1
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_Event_checkFuc
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           
  3773                           ;psect for function _TIMER1_INTSTOP
  3774  0638                     _TIMER1_INTSTOP:	
  3775  0638                     l3762:	
  3776                           ;incstack = 0
  3777                           ; Regs used in _TIMER1_INTSTOP: []
  3778                           
  3779                           
  3780                           ;main.c: 455: TMR1IE = 0;
  3781  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3782  0639  100C               	bcf	12,0	;volatile
  3783                           
  3784                           ;main.c: 456: TMR1ON = 0;
  3785  063A  1283               	bcf	3,5	;RP0=0, select bank0
  3786  063B  1010               	bcf	16,0	;volatile
  3787                           
  3788                           ;main.c: 457: PEIE=0;
  3789  063C  130B               	bcf	11,6	;volatile
  3790  063D  0008               	return
  3791  063E                     __end_of_TIMER1_INTSTOP:	
  3792                           
  3793                           	psect	text22
  3794  05DC                     __ptext22:	
  3795 ;; *************** function _TIMER1_INTSTART *****************
  3796 ;; Defined at:
  3797 ;;		line 429 in file "main.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2
  3806 ;; Tracked objects:
  3807 ;;		On entry : 300/0
  3808 ;;		On exit  : 300/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1
  3811 ;;      Params:         0       0       0
  3812 ;;      Locals:         0       0       0
  3813 ;;      Temps:          0       0       0
  3814 ;;      Totals:         0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    1
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_Event_checkFuc
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _TIMER1_INTSTART
  3827  05DC                     _TIMER1_INTSTART:	
  3828                           
  3829                           ;main.c: 432: T1CON = 0B00000000;
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _TIMER1_INTSTART: [wreg+status,2]
  3833  05DC  0190               	clrf	16	;volatile
  3834                           
  3835                           ;main.c: 435: TMR1L = 0XC0;
  3836  05DD  30C0               	movlw	192
  3837  05DE  008E               	movwf	14	;volatile
  3838                           
  3839                           ;main.c: 437: TMR1H = 0XE0;
  3840  05DF  30E0               	movlw	224
  3841  05E0  008F               	movwf	15	;volatile
  3842                           
  3843                           ;main.c: 439: TMR1IE = 1;
  3844  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  3845  05E2  140C               	bsf	12,0	;volatile
  3846                           
  3847                           ;main.c: 440: TMR1ON = 1;
  3848  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3849  05E4  1410               	bsf	16,0	;volatile
  3850                           
  3851                           ;main.c: 441: PEIE=1;
  3852  05E5  170B               	bsf	11,6	;volatile
  3853                           
  3854                           ;main.c: 442: GIE = 1;
  3855  05E6  178B               	bsf	11,7	;volatile
  3856  05E7  0008               	return
  3857  05E8                     __end_of_TIMER1_INTSTART:	
  3858                           
  3859                           	psect	text23
  3860  05B9                     __ptext23:	
  3861 ;; *************** function _DelayMs *****************
  3862 ;; Defined at:
  3863 ;;		line 1457 in file "main.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  Time            1    wreg     unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  Time            1    4[COMMON] unsigned char 
  3868 ;;  b               1    6[COMMON] unsigned char 
  3869 ;;  a               1    5[COMMON] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, pclath, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMMON   BANK0   BANK1
  3879 ;;      Params:         0       0       0
  3880 ;;      Locals:         3       0       0
  3881 ;;      Temps:          0       0       0
  3882 ;;      Totals:         3       0       0
  3883 ;;Total ram usage:        3 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    2
  3886 ;; This function calls:
  3887 ;;		_DelayUs
  3888 ;; This function is called by:
  3889 ;;		_oneGLO
  3890 ;;		_Charg_Disp
  3891 ;;		_Mode_changeCheckFuc
  3892 ;;		_Event_checkFuc
  3893 ;;		_chrg_ModeCheck
  3894 ;;		_Solar_BaseDefine
  3895 ;;		_main
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _DelayMs
  3901  05B9                     _DelayMs:	
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _DelayMs: [wreg+status,2+status,0+pclath+cstack]
  3905                           ;DelayMs@Time stored from wreg
  3906  05B9  00F4               	movwf	DelayMs@Time
  3907                           
  3908                           ;main.c: 1459: unsigned char a,b;
  3909                           ;main.c: 1460: for(a=0;a<Time;a++)
  3910  05BA  01F5               	clrf	DelayMs@a
  3911  05BB                     l3704:	
  3912  05BB  0874               	movf	DelayMs@Time,w
  3913  05BC  0275               	subwf	DelayMs@a,w
  3914  05BD  1803               	btfsc	3,0
  3915  05BE  2DCA               	goto	l1414
  3916                           
  3917                           ;main.c: 1461: {
  3918                           ;main.c: 1462: for(b=0;b<5;b++)
  3919  05BF  01F6               	clrf	DelayMs@b
  3920  05C0                     l3696:	
  3921                           
  3922                           ;main.c: 1463: {
  3923                           ;main.c: 1464: DelayUs(98);
  3924  05C0  3062               	movlw	98
  3925  05C1  2610               	fcall	_DelayUs
  3926  05C2  3005               	movlw	5
  3927  05C3  0AF6               	incf	DelayMs@b,f
  3928  05C4  0276               	subwf	DelayMs@b,w
  3929  05C5  1C03               	skipc
  3930  05C6  2DC0               	goto	l3696
  3931  05C7  0064               	clrwdt	;# 
  3932  05C8  0AF5               	incf	DelayMs@a,f
  3933  05C9  2DBB               	goto	l3704
  3934  05CA                     l1414:	
  3935  05CA  0064               	clrwdt	;# 
  3936  05CB  0008               	return
  3937  05CC                     __end_of_DelayMs:	
  3938                           
  3939                           	psect	text24
  3940  0610                     __ptext24:	
  3941 ;; *************** function _DelayUs *****************
  3942 ;; Defined at:
  3943 ;;		line 1441 in file "main.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  Time            1    wreg     unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  Time            1    2[COMMON] unsigned char 
  3948 ;;  a               1    3[COMMON] unsigned char 
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, status,2, status,0
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMMON   BANK0   BANK1
  3958 ;;      Params:         0       0       0
  3959 ;;      Locals:         2       0       0
  3960 ;;      Temps:          0       0       0
  3961 ;;      Totals:         2       0       0
  3962 ;;Total ram usage:        2 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    1
  3965 ;; This function calls:
  3966 ;;		Nothing
  3967 ;; This function is called by:
  3968 ;;		_DelayMs
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           
  3973                           ;psect for function _DelayUs
  3974  0610                     _DelayUs:	
  3975                           
  3976                           ;incstack = 0
  3977                           ; Regs used in _DelayUs: [wreg+status,2+status,0]
  3978                           ;DelayUs@Time stored from wreg
  3979  0610  00F2               	movwf	DelayUs@Time
  3980                           
  3981                           ;main.c: 1443: unsigned char a;
  3982                           ;main.c: 1444: for(a=0;a<Time;a++)
  3983  0611  01F3               	clrf	DelayUs@a
  3984  0612                     l3686:	
  3985  0612  0872               	movf	DelayUs@Time,w
  3986  0613  0273               	subwf	DelayUs@a,w
  3987  0614  1803               	btfsc	3,0
  3988  0615  0008               	return
  3989                           
  3990                           ;main.c: 1445: {
  3991                           ;main.c: 1446: __nop();
  3992  0616  0000               	nop
  3993  0617  0AF3               	incf	DelayUs@a,f
  3994  0618  2E12               	goto	l3686
  3995  0619                     __end_of_DelayUs:	
  3996                           
  3997                           	psect	text25
  3998  0539                     __ptext25:	
  3999 ;; *************** function _EEPROM_Init *****************
  4000 ;; Defined at:
  4001 ;;		line 1550 in file "main.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  ep_t            1    5[COMMON] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 300/100
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1
  4015 ;;      Params:         0       0       0
  4016 ;;      Locals:         1       0       0
  4017 ;;      Temps:          0       0       0
  4018 ;;      Totals:         1       0       0
  4019 ;;Total ram usage:        1 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    2
  4022 ;; This function calls:
  4023 ;;		_EEPROMread
  4024 ;;		_EEPROMwrite
  4025 ;; This function is called by:
  4026 ;;		_main
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           
  4031                           ;psect for function _EEPROM_Init
  4032  0539                     _EEPROM_Init:	
  4033                           
  4034                           ;main.c: 1552: unsigned char ep_t;
  4035                           ;main.c: 1554: EEPROMwrite(0x03, 0xAA);
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _EEPROM_Init: [wreg+status,2+status,0+pclath+cstack]
  4039  0539  30AA               	movlw	170
  4040  053A  00F2               	movwf	EEPROMwrite@Data
  4041  053B  3003               	movlw	3
  4042  053C  2555               	fcall	_EEPROMwrite
  4043                           
  4044                           ;main.c: 1556: ep_t = EEPROMread(0X03);
  4045  053D  3003               	movlw	3
  4046  053E  2619               	fcall	_EEPROMread
  4047  053F  00F5               	movwf	EEPROM_Init@ep_t
  4048                           
  4049                           ;main.c: 1558: if(ep_t != 0xAA)
  4050  0540  3AAA               	xorlw	170
  4051                           
  4052                           ;main.c: 1559: {
  4053                           ;main.c: 1560: EEPROMwrite(0x03, 0xAA);
  4054  0541  30AA               	movlw	170
  4055  0542  00F2               	movwf	EEPROMwrite@Data
  4056  0543  3003               	movlw	3
  4057  0544  1903               	btfsc	3,2
  4058  0545  2D4A               	goto	L11
  4059  0546  2555               	fcall	_EEPROMwrite
  4060                           
  4061                           ;main.c: 1561: }
  4062                           ;main.c: 1564: EEPROMwrite(0x03, 0xAA);
  4063  0547  30AA               	movlw	170
  4064  0548  00F2               	movwf	EEPROMwrite@Data
  4065  0549  3003               	movlw	3
  4066  054A                     L11:	
  4067  054A  2555               	fcall	_EEPROMwrite
  4068                           
  4069                           ;main.c: 1566: ep_t = EEPROMread(0X03);
  4070  054B  3003               	movlw	3
  4071  054C  2619               	fcall	_EEPROMread
  4072  054D  00F5               	movwf	EEPROM_Init@ep_t
  4073                           
  4074                           ;main.c: 1568: if(ep_t != 0xAA)
  4075  054E  3AAA               	xorlw	170
  4076  054F  1903               	btfsc	3,2
  4077  0550  0008               	return
  4078                           
  4079                           ;main.c: 1569: {
  4080                           ;main.c: 1570: EEPROMwrite(0x03, 0xAA);
  4081  0551  30AA               	movlw	170
  4082  0552  00F2               	movwf	EEPROMwrite@Data
  4083  0553  3003               	movlw	3
  4084  0554  2D55               	ljmp	_EEPROMwrite
  4085  0555                     __end_of_EEPROM_Init:	
  4086                           
  4087                           	psect	text26
  4088  0555                     __ptext26:	
  4089 ;; *************** function _EEPROMwrite *****************
  4090 ;; Defined at:
  4091 ;;		line 1517 in file "main.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  EEAddr          1    wreg     unsigned char 
  4094 ;;  Data            1    2[COMMON] unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  EEAddr          1    3[COMMON] unsigned char 
  4097 ;;  gietag          1    4[COMMON] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/100
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMMON   BANK0   BANK1
  4107 ;;      Params:         1       0       0
  4108 ;;      Locals:         2       0       0
  4109 ;;      Temps:          0       0       0
  4110 ;;      Totals:         3       0       0
  4111 ;;Total ram usage:        3 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    1
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_EEPROM_Init
  4118 ;;		_Version_Write
  4119 ;;		_AD_baseWriteFuc
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           
  4124                           ;psect for function _EEPROMwrite
  4125  0555                     _EEPROMwrite:	
  4126                           
  4127                           ;incstack = 0
  4128                           ; Regs used in _EEPROMwrite: [wreg+status,2+status,0]
  4129                           ;EEPROMwrite@EEAddr stored from wreg
  4130  0555  00F3               	movwf	EEPROMwrite@EEAddr
  4131                           
  4132                           ;main.c: 1519: unsigned char gietag;
  4133                           ;main.c: 1521: gietag = GIE;
  4134  0556  3000               	movlw	0
  4135  0557  1B8B               	btfsc	11,7	;volatile
  4136  0558  3001               	movlw	1
  4137  0559  00F4               	movwf	EEPROMwrite@gietag
  4138                           
  4139                           ;main.c: 1522: GIE = 0;
  4140  055A  138B               	bcf	11,7	;volatile
  4141  055B                     l1429:	
  4142                           ;main.c: 1523: while(GIE);
  4143                           
  4144  055B  1B8B               	btfsc	11,7	;volatile
  4145  055C  2D5B               	goto	l1429
  4146                           
  4147                           ;main.c: 1527: EEADR = EEAddr;
  4148  055D  0873               	movf	EEPROMwrite@EEAddr,w
  4149  055E  1683               	bsf	3,5	;RP0=1, select bank1
  4150  055F  1303               	bcf	3,6	;RP1=0, select bank1
  4151  0560  009B               	movwf	27	;volatile
  4152                           
  4153                           ;main.c: 1528: EEDAT = Data;
  4154  0561  0872               	movf	EEPROMwrite@Data,w
  4155  0562  009A               	movwf	26	;volatile
  4156                           
  4157                           ;main.c: 1529: EEIF = 0;
  4158  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4159  0564  138C               	bcf	12,7	;volatile
  4160                           
  4161                           ;main.c: 1530: EECON1 |= 0x34;
  4162  0565  3034               	movlw	52
  4163  0566  1683               	bsf	3,5	;RP0=1, select bank1
  4164  0567  049C               	iorwf	28,f	;volsfr
  4165                           
  4166                           ;main.c: 1531: WR = 1;
  4167  0568  141D               	bsf	29,0	;volsfr
  4168  0569                     l1432:	
  4169                           ;main.c: 1532: while(WR);
  4170                           
  4171  0569  181D               	btfsc	29,0	;volsfr
  4172  056A  2D69               	goto	l1432
  4173                           
  4174                           ;main.c: 1536: GIE = gietag;
  4175  056B  1C74               	btfss	EEPROMwrite@gietag,0
  4176  056C  2D6F               	goto	u2540
  4177  056D  178B               	bsf	11,7	;volatile
  4178  056E  0008               	return
  4179  056F                     u2540:	
  4180  056F  138B               	bcf	11,7	;volatile
  4181  0570  0008               	return
  4182  0571                     __end_of_EEPROMwrite:	
  4183                           
  4184                           	psect	text27
  4185  051B                     __ptext27:	
  4186 ;; *************** function _AD_baseGetFuc *****************
  4187 ;; Defined at:
  4188 ;;		line 1613 in file "main.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  ad_vh           1    7[COMMON] unsigned char 
  4193 ;;  ad_vl           1    6[COMMON] unsigned char 
  4194 ;;  ad_vh2          1    5[COMMON] unsigned char 
  4195 ;;  ad_vl2          1    4[COMMON] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      unsigned char 
  4198 ;; Registers used:
  4199 ;;		wreg, pclath, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 200/0
  4202 ;;		On exit  : 200/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1
  4205 ;;      Params:         0       0       0
  4206 ;;      Locals:         4       0       0
  4207 ;;      Temps:          0       0       0
  4208 ;;      Totals:         4       0       0
  4209 ;;Total ram usage:        4 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    2
  4212 ;; This function calls:
  4213 ;;		_EEPROMread
  4214 ;; This function is called by:
  4215 ;;		_main
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _AD_baseGetFuc
  4221  051B                     _AD_baseGetFuc:	
  4222                           
  4223                           ;main.c: 1615: unsigned char ad_vl,ad_vh,ad_vl2,ad_vh2;
  4224                           ;main.c: 1617: ad_vh = EEPROMread(0x12);
  4225                           
  4226                           ;incstack = 0
  4227                           ; Regs used in _AD_baseGetFuc: [wreg+pclath+cstack]
  4228  051B  3012               	movlw	18
  4229  051C  2619               	fcall	_EEPROMread
  4230  051D  00F7               	movwf	AD_baseGetFuc@ad_vh
  4231                           
  4232                           ;main.c: 1618: ad_vl = EEPROMread(0x13);
  4233  051E  3013               	movlw	19
  4234  051F  2619               	fcall	_EEPROMread
  4235  0520  00F6               	movwf	AD_baseGetFuc@ad_vl
  4236                           
  4237                           ;main.c: 1620: ad_vh2 = EEPROMread(0x12);
  4238  0521  3012               	movlw	18
  4239  0522  2619               	fcall	_EEPROMread
  4240  0523  00F5               	movwf	AD_baseGetFuc@ad_vh2
  4241                           
  4242                           ;main.c: 1621: ad_vl2 = EEPROMread(0x13);
  4243  0524  3013               	movlw	19
  4244  0525  2619               	fcall	_EEPROMread
  4245  0526  00F4               	movwf	AD_baseGetFuc@ad_vl2
  4246                           
  4247                           ;main.c: 1623: if((ad_vh == ad_vh2) && (ad_vl == ad_vl2))
  4248  0527  0877               	movf	AD_baseGetFuc@ad_vh,w
  4249  0528  0675               	xorwf	AD_baseGetFuc@ad_vh2,w
  4250  0529  1D03               	skipz
  4251  052A  3400               	retlw	0
  4252  052B  0876               	movf	AD_baseGetFuc@ad_vl,w
  4253  052C  0674               	xorwf	AD_baseGetFuc@ad_vl2,w
  4254  052D  1D03               	skipz
  4255  052E  3400               	retlw	0
  4256                           
  4257                           ;main.c: 1624: {
  4258                           ;main.c: 1625: g_adBaseValue = (unsigned int)ad_vh;
  4259  052F  0877               	movf	AD_baseGetFuc@ad_vh,w
  4260  0530  1283               	bcf	3,5	;RP0=0, select bank0
  4261  0531  00E2               	movwf	_g_adBaseValue	;volatile
  4262  0532  01E3               	clrf	_g_adBaseValue+1	;volatile
  4263                           
  4264                           ;main.c: 1627: g_adBaseValue <<= 8;
  4265  0533  0862               	movf	_g_adBaseValue,w	;volatile
  4266  0534  00E3               	movwf	_g_adBaseValue+1	;volatile
  4267  0535  01E2               	clrf	_g_adBaseValue	;volatile
  4268                           
  4269                           ;main.c: 1628: g_adBaseValue |= ad_vl;
  4270  0536  0876               	movf	AD_baseGetFuc@ad_vl,w
  4271  0537  04E2               	iorwf	_g_adBaseValue,f	;volatile
  4272                           
  4273                           ;main.c: 1629: return 1;
  4274  0538  3401               	retlw	1
  4275  0539                     __end_of_AD_baseGetFuc:	
  4276                           ;main.c: 1631: return 0;
  4277                           
  4278                           
  4279                           	psect	text28
  4280  0619                     __ptext28:	
  4281 ;; *************** function _EEPROMread *****************
  4282 ;; Defined at:
  4283 ;;		line 1497 in file "main.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  EEAddr          1    wreg     unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  EEAddr          1    2[COMMON] unsigned char 
  4288 ;;  ReEEPROMread    1    3[COMMON] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      unsigned char 
  4291 ;; Registers used:
  4292 ;;		wreg
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/100
  4295 ;;		On exit  : 300/100
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1
  4298 ;;      Params:         0       0       0
  4299 ;;      Locals:         2       0       0
  4300 ;;      Temps:          0       0       0
  4301 ;;      Totals:         2       0       0
  4302 ;;Total ram usage:        2 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    1
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_EEPROM_Init
  4309 ;;		_Version_Write
  4310 ;;		_AD_baseGetFuc
  4311 ;;		_AD_baseWriteFuc
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           
  4316                           ;psect for function _EEPROMread
  4317  0619                     _EEPROMread:	
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in _EEPROMread: [wreg]
  4321                           ;EEPROMread@EEAddr stored from wreg
  4322  0619  00F2               	movwf	EEPROMread@EEAddr
  4323                           
  4324                           ;main.c: 1499: unsigned char ReEEPROMread;
  4325                           ;main.c: 1501: EEADR = EEAddr;
  4326  061A  1683               	bsf	3,5	;RP0=1, select bank1
  4327  061B  1303               	bcf	3,6	;RP1=0, select bank1
  4328  061C  009B               	movwf	27	;volatile
  4329                           
  4330                           ;main.c: 1502: RD = 1;
  4331  061D  141C               	bsf	28,0	;volsfr
  4332                           
  4333                           ;main.c: 1503: ReEEPROMread = EEDAT;
  4334  061E  081A               	movf	26,w	;volatile
  4335  061F  00F3               	movwf	EEPROMread@ReEEPROMread
  4336                           
  4337                           ;main.c: 1504: RD = 0;
  4338  0620  101C               	bcf	28,0	;volsfr
  4339                           
  4340                           ;main.c: 1505: return ReEEPROMread;
  4341  0621  0008               	return
  4342  0622                     __end_of_EEPROMread:	
  4343                           
  4344                           	psect	text29
  4345  062A                     __ptext29:	
  4346 ;; *************** function _ADC_INITIAL *****************
  4347 ;; Defined at:
  4348 ;;		line 511 in file "main.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;		None
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2
  4357 ;; Tracked objects:
  4358 ;;		On entry : B00/0
  4359 ;;		On exit  : B00/0
  4360 ;;		Unchanged: 800/0
  4361 ;; Data sizes:     COMMON   BANK0   BANK1
  4362 ;;      Params:         0       0       0
  4363 ;;      Locals:         0       0       0
  4364 ;;      Temps:          0       0       0
  4365 ;;      Totals:         0       0       0
  4366 ;;Total ram usage:        0 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    1
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_main
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function _ADC_INITIAL
  4378  062A                     _ADC_INITIAL:	
  4379                           
  4380                           ;main.c: 513: ANSEL = 0B00010001;
  4381                           
  4382                           ;incstack = 0
  4383                           ; Regs used in _ADC_INITIAL: [wreg+status,2]
  4384  062A  3011               	movlw	17
  4385  062B  1683               	bsf	3,5	;RP0=1, select bank1
  4386  062C  0091               	movwf	17	;volatile
  4387                           
  4388                           ;main.c: 514: ADCON1 = 0B00000000;
  4389  062D  019F               	clrf	31	;volatile
  4390                           
  4391                           ;main.c: 517: ADCON0 = 0B10000000;
  4392  062E  3080               	movlw	128
  4393  062F  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0630  009F               	movwf	31	;volatile
  4395  0631  0008               	return
  4396  0632                     __end_of_ADC_INITIAL:	
  4397                           
  4398                           	psect	text30
  4399  048C                     __ptext30:	
  4400 ;; *************** function _ISR *****************
  4401 ;; Defined at:
  4402 ;;		line 333 in file "main.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  ReadAPin        1    0        unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 300/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1
  4416 ;;      Params:         0       0       0
  4417 ;;      Locals:         0       0       0
  4418 ;;      Temps:          2       0       0
  4419 ;;      Totals:         2       0       0
  4420 ;;Total ram usage:        2 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		Interrupt level 1
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _ISR
  4431  048C                     _ISR:	
  4432                           
  4433                           ;main.c: 335: unsigned char ReadAPin;
  4434                           ;main.c: 338: if(INTE && INTF)
  4435  048C  1A0B               	btfsc	11,4	;volatile
  4436  048D  1C8B               	btfss	11,1	;volatile
  4437  048E  2C92               	goto	i1l1105
  4438                           
  4439                           ;main.c: 339: {
  4440                           ;main.c: 340: INTF = 0;
  4441  048F  108B               	bcf	11,1	;volatile
  4442                           
  4443                           ;main.c: 341: INTE = 1;
  4444  0490  160B               	bsf	11,4	;volatile
  4445                           
  4446                           ;main.c: 347: }else
  4447  0491  2C9A               	goto	i1l2630
  4448  0492                     i1l1105:	
  4449                           
  4450                           ;main.c: 349: if(PAIE && PAIF)
  4451  0492  198B               	btfsc	11,3	;volatile
  4452  0493  1C0B               	btfss	11,0	;volatile
  4453  0494  2C9A               	goto	i1l2630
  4454                           
  4455                           ;main.c: 350: {
  4456                           ;main.c: 351: ReadAPin = PORTA;
  4457  0495  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0496  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0497  0805               	movf	5,w	;volatile
  4460                           
  4461                           ;main.c: 352: PAIF = 0;
  4462  0498  100B               	bcf	11,0	;volatile
  4463                           
  4464                           ;main.c: 353: PAIE = 1;
  4465  0499  158B               	bsf	11,3	;volatile
  4466  049A                     i1l2630:	
  4467                           
  4468                           ;main.c: 366: }
  4469                           ;main.c: 369: if(TMR1IF)
  4470  049A  1283               	bcf	3,5	;RP0=0, select bank0
  4471  049B  1303               	bcf	3,6	;RP1=0, select bank0
  4472  049C  1C0C               	btfss	12,0	;volatile
  4473  049D  2CAD               	goto	i1l1110
  4474                           
  4475                           ;main.c: 370: {
  4476                           ;main.c: 371: TMR1IF = 0;
  4477  049E  100C               	bcf	12,0	;volatile
  4478                           
  4479                           ;main.c: 376: TMR1L = 0XC0;
  4480  049F  30C0               	movlw	192
  4481  04A0  008E               	movwf	14	;volatile
  4482                           
  4483                           ;main.c: 378: TMR1H = 0XE0;
  4484  04A1  30E0               	movlw	224
  4485  04A2  008F               	movwf	15	;volatile
  4486                           
  4487                           ;main.c: 381: if(g_ledkeep > 0)g_ledkeep--;
  4488  04A3  087A               	movf	_g_ledkeep,w	;volatile
  4489  04A4  047B               	iorwf	_g_ledkeep+1,w	;volatile
  4490  04A5  1903               	btfsc	3,2
  4491  04A6  2CAD               	goto	i1l1110
  4492  04A7  3001               	movlw	1
  4493  04A8  02FA               	subwf	_g_ledkeep,f	;volatile
  4494  04A9  3000               	movlw	0
  4495  04AA  1C03               	skipc
  4496  04AB  03FB               	decf	_g_ledkeep+1,f	;volatile
  4497  04AC  02FB               	subwf	_g_ledkeep+1,f	;volatile
  4498  04AD                     i1l1110:	
  4499  04AD  0871               	movf	??_ISR+1,w
  4500  04AE  008A               	movwf	10
  4501  04AF  0E70               	swapf	??_ISR^(0+-128),w
  4502  04B0  0083               	movwf	3
  4503  04B1  0EFE               	swapf	126,f
  4504  04B2  0E7E               	swapf	126,w
  4505  04B3  0009               	retfie
  4506  04B4                     __end_of_ISR:	
  4507  007E                     btemp	set	126	;btemp
  4508  007E                     wtemp0	set	126
  4509                           
  4510                           	psect	intentry
  4511  0004                     __pintentry:	
  4512                           ;incstack = 0
  4513                           ; Regs used in _ISR: [wreg+status,2+status,0]
  4514                           
  4515  0004                     interrupt_function:	
  4516  007E                     saved_w	set	btemp
  4517  0004  00FE               	movwf	btemp
  4518  0005  0E03               	swapf	3,w
  4519  0006  00F0               	movwf	??_ISR
  4520  0007  080A               	movf	10,w
  4521  0008  00F1               	movwf	??_ISR+1
  4522  0009  2C8C               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     38      75
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_GLO_cdsCheckFuc
    _main->_chrg_ModeCheck
    _chrg_ModeCheck->_Charg_Disp
    _Charg_Disp->_DelayMs
    _Version_Write->_EEPROMwrite
    _Solar_BaseDefine->_GET_ADC_DATA
    _oneGLO->_DelayMs
    _AD_baseWriteFuc->_EEPROMwrite
    _Sola_checkFuc->_GET_ADC_DATA
    _Mode_changeCheckFuc->_DelayMs
    _GLO_cdsCheckFuc->___wmul
    ___lwdiv->___wmul
    _Event_checkFuc->_DelayMs
    _DelayMs->_DelayUs
    _EEPROM_Init->_EEPROMwrite
    _AD_baseGetFuc->_EEPROMread

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Sola_checkFuc
    _main->_Solar_BaseDefine
    _Solar_BaseDefine->___lwdiv
    _Sola_checkFuc->___lwdiv
    _GLO_cdsCheckFuc->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13211
                                              9 COMMON     1     1      0
                        _ADC_INITIAL
                      _AD_baseGetFuc
                            _DelayMs
                        _EEPROM_Init
                     _Event_checkFuc
                    _GLO_cdsCheckFuc
                        _INT_INITIAL
                _Mode_changeCheckFuc
                      _POWER_INITIAL
                      _Sola_checkFuc
                   _Solar_BaseDefine
                   _TestFunc_Disable
                    _TestFunc_Enable
                      _Version_Write
                        _WDT_INITIAL
                            ___lwdiv
                             ___wmul
                     _chrg_ModeCheck
 ---------------------------------------------------------------------------------
 (1) _chrg_ModeCheck                                       1     1      0     476
                                              8 COMMON     1     1      0
                         _Charg_Disp
                            _DelayMs
 ---------------------------------------------------------------------------------
 (2) _Charg_Disp                                           1     1      0     238
                                              7 COMMON     1     1      0
                            _DelayMs
 ---------------------------------------------------------------------------------
 (1) _Version_Write                                        4     4      0    1099
                                              5 COMMON     2     2      0
                         _EEPROMread
                        _EEPROMwrite
 ---------------------------------------------------------------------------------
 (1) _TestFunc_Enable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TestFunc_Disable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Solar_BaseDefine                                    31    31      0    4046
                                              7 BANK0     31    31      0
                    _AD_baseWriteFuc
                            _DelayMs
                       _GET_ADC_DATA
                            ___lwdiv
                             _oneGLO
 ---------------------------------------------------------------------------------
 (2) _oneGLO                                               0     0      0     204
                            _DelayMs
 ---------------------------------------------------------------------------------
 (2) _AD_baseWriteFuc                                      6     4      2    1421
                                              5 COMMON     2     0      2
                                              0 BANK0      4     4      0
                         _EEPROMread
                        _EEPROMwrite
 ---------------------------------------------------------------------------------
 (1) _Sola_checkFuc                                       31    31      0    2248
                                              7 BANK0     31    31      0
                       _GET_ADC_DATA
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _GET_ADC_DATA                                         7     4      3     148
                                              2 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (1) _POWER_INITIAL                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_changeCheckFuc                                  1     1      0     204
                                              7 COMMON     1     1      0
                            _DelayMs
 ---------------------------------------------------------------------------------
 (1) _INT_INITIAL                                          1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _GLO_cdsCheckFuc                                      1     1      0    1681
                                              8 COMMON     1     1      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     592
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4    1055
                                              0 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Event_checkFuc                                       0     0      0     204
                            _DelayMs
                    _TIMER1_INTSTART
                     _TIMER1_INTSTOP
                      _eventEnterOFF
                       _eventExitOFF
 ---------------------------------------------------------------------------------
 (2) _eventExitOFF                                         1     1      0       0
                        _WDT_INITIAL
 ---------------------------------------------------------------------------------
 (1) _WDT_INITIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventEnterOFF                                        1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _TIMER1_INTSTOP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TIMER1_INTSTART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                              3     3      0     204
                                              4 COMMON     3     3      0
                            _DelayUs
 ---------------------------------------------------------------------------------
 (3) _DelayUs                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Init                                          1     1      0    1099
                                              5 COMMON     1     1      0
                         _EEPROMread
                        _EEPROMwrite
 ---------------------------------------------------------------------------------
 (2) _EEPROMwrite                                          3     2      1     966
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _AD_baseGetFuc                                        4     4      0     263
                                              4 COMMON     4     4      0
                         _EEPROMread
 ---------------------------------------------------------------------------------
 (2) _EEPROMread                                           2     2      0      65
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_INITIAL                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  3     3      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_INITIAL
   _AD_baseGetFuc
     _EEPROMread
   _DelayMs
     _DelayUs
   _EEPROM_Init
     _EEPROMread
     _EEPROMwrite
   _Event_checkFuc
     _DelayMs
       _DelayUs
     _TIMER1_INTSTART
     _TIMER1_INTSTOP
     _eventEnterOFF
     _eventExitOFF
       _WDT_INITIAL
   _GLO_cdsCheckFuc
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _INT_INITIAL
   _Mode_changeCheckFuc
     _DelayMs
       _DelayUs
   _POWER_INITIAL
   _Sola_checkFuc
     _GET_ADC_DATA
     ___lwdiv
       ___wmul (ARG)
   _Solar_BaseDefine
     _AD_baseWriteFuc
       _EEPROMread
       _EEPROMwrite
     _DelayMs
       _DelayUs
     _GET_ADC_DATA
     ___lwdiv
       ___wmul (ARG)
     _oneGLO
       _DelayMs
         _DelayUs
   _TestFunc_Disable
   _TestFunc_Enable
   _Version_Write
     _EEPROMread
     _EEPROMwrite
   _WDT_INITIAL
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _chrg_ModeCheck
     _Charg_Disp
       _DelayMs
         _DelayUs
     _DelayMs
       _DelayUs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     26      4B       4       93.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      57       8        0.0%
ABS                  0      0      57       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 06 12:50:43 2021

                           pc 0002                            PL2 042E                            PL4 0136  
                          PL6 0222                            PL8 022B          __size_of_ADC_INITIAL 0008  
                          _RD 04E0                            _WR 04E8              _Solar_BaseDefine 0159  
                          fsr 0004           ___wmul@multiplicand 0074                           PL10 0307  
                         PL20 013F                           PL12 030F                           PL30 014F  
                         PL22 04F8                           PL14 0233                           PL32 0154  
                         PL24 0145                           PL16 0315                           PL26 039E  
                         PL18 0239                           PL28 014A                           _GIE 005F  
                         _PA2 002A                           _PA3 002B                           _PA4 002C  
                         _PC1 0039                           _PA6 002E                           _PA7 002F  
                         _PC3 003B                           _PC5 003D                           _ISR 048C  
                         _PSA 040B                           fsr0 0004                           indf 0000  
     __end_of_GLO_cdsCheckFuc 03FA                          S4612 063E                          ?_ISR 0070  
                        l1120 05AD                          l1203 004E                          l1220 00A7  
                        l1212 0060                          l1231 00A3                          l1223 0080  
                        l1137 04C6                          l1138 04CA                          l1236 00A8  
                        l1180 0418                          l1340 0457                          l1229 0092  
                        l1414 05CA                          l1270 00F5                          l1238 00AD  
                        l1334 0440                          l1502 034C                          l1511 039B  
                        l1432 0569                          l1272 0106                          l1256 010A  
                        l1248 00C0                          l1360 02A4                          l1177 0410  
                        l1505 036C                          l1194 0043                          l1178 0414  
                        l1506 0381                          l1259 00E0                          l1291 011B  
                        l1364 0302                          l1429 055B                          l1373 03D8  
                        l4030 00AC                          l1359 029F                          l1391 0163  
                        l1296 0120                          l4200 045E                          l4042 00BB  
                        l4140 0113                          l4116 010E                          l4060 00CF  
                        l4070 00DB                          l4214 0248                          l1398 01C0  
                        l1399 01C5                          l4208 0245                          l4154 012A  
                        l4234 025A                          l4226 0259                          l4250 02ED  
                        l4260 0300                          l4316 0169                          l4180 044C  
                        l4270 03AE                          l4166 043C                          l3704 05BB  
                        l4096 00F4                          l4272 03B7                          l4336 017B  
                        l4328 017A                          l4352 020E                          l4292 03E9  
                        l3732 05E8                          l4382 0513                          l4550 034E  
                        l3832 0595                          l3824 04F2                          l3762 0638  
                        l3914 0407                          l3746 05A9                          l4570 0389  
                        l3852 0470                          l3828 058D                          l3686 0612  
                        l3782 05CC                          l3696 05C0                          l3864 0487  
                        l3936 042D                          l3928 041D                          l3962 0052  
                        l4586 0394                          l3956 004D                          l3986 006F  
                        l3996 007B                          _ADON 00F8                    _Charg_Disp 05A4  
                        _EEIF 0067                          _IOCA 0096                          u3315 0281  
                        _PAIE 005B                          u2540 056F                          _PAIF 0058  
                        u3325 0267                          u3435 03DE                          u2655 0479  
                        u3455 03EF                          u3375 02FC                          _PEIE 005E  
                        u3485 01A2                          _INTE 005C                          _INTF 0059  
                        u3495 0188               ??_AD_baseGetFuc 0074                          _WPUA 0095  
                        _WPUC 0088                          _main 031C                          btemp 007E  
                        start 000A           AD_baseGetFuc@ad_vh2 0075           AD_baseGetFuc@ad_vl2 0074  
             __end_of_DelayMs 05CC               __end_of_DelayUs 0619           __size_of_EEPROMread 0009  
                       ??_ISR 0070                         ?_main 0070                         _EEADR 009B  
                       _EEDAT 009A      __size_of_AD_baseWriteFuc 001F                _TIMER1_INTSTOP 0638  
                       _ANSEL 0091                         _T1CON 0010               __end_of___lwdiv 048C  
   __size_of_TestFunc_Disable 0001                         _TMR1H 000F                         _TMR1L 000E  
                       _PORTA 0005                         _PORTC 0007                  ?_INT_INITIAL 0070  
                       _TRISA 0085                         _TRISC 0087                         _WPUA2 04AA  
                       _WPUA3 04AB                         _WPUC1 0441               ??_Version_Write 0075  
      __size_of_eventEnterOFF 0010                         pclath 000A                         status 0003  
                       wtemp0 007E          __size_of_EEPROM_Init 001C               __initialization 000B  
               ?_eventExitOFF 0070                  __end_of_main 039E          __size_of_EEPROMwrite 001C  
      __end_of_TIMER1_INTSTOP 063E                        ??_main 0079       __size_of_chrg_ModeCheck 002E  
              _Event_checkFuc 003B         Sola_checkFuc@ad_total 002B              ?_GLO_cdsCheckFuc 0070  
        __end_of_GET_ADC_DATA 04D9          GET_ADC_DATA@ADC_DATA 0076                        _ADCON0 001F  
                      _ADCON1 009F                        _ADRESH 001E                        _ADRESL 009E  
                      _EECON1 009C               _TIMER1_INTSTART 05DC                        _CMCON0 0019  
                 ?_Charg_Disp 0070                        i1l1110 04AD                        i1l1105 0492  
                      i1l2630 049A                        _INTEDG 040E                        _INTCON 000B  
                   ??_DelayMs 0074                     ??_DelayUs 0072                        _OSCCON 008F  
                      _TMR1IE 0460                        _TMR1IF 0060                        _OPTION 0081  
                      _TMR1ON 0080                        _WDTCON 0018                        _TRISA2 042A  
                      _TRISA3 042B                        _TRISC3 043B                        _SWDTEN 00C0  
                      _Seg_0F 0048                ??_eventExitOFF 0072                 _eventEnterOFF 05CC  
                      ___wmul 058B                     ??___lwdiv 0078                        _oneGLO 05E8  
      __end_of_Event_checkFuc 0136               ?_TIMER1_INTSTOP 0070                  ??_EEPROMread 0072  
                      saved_w 007E             ??_AD_baseWriteFuc 0077                  ?_WDT_INITIAL 0070  
    __end_of_Solar_BaseDefine 0222         __end_of_Sola_checkFuc 0307         __end_of_POWER_INITIAL 058B  
    __size_of_TestFunc_Enable 0006       __end_of__initialization 0039                 _g_adBaseValue 0062  
              __pcstackCOMMON 0070                ?_eventEnterOFF 0070            __end_of_EEPROMread 0622  
                __pidataBANK0 0000             GET_ADC_DATA@AN_CH 0078               ?_Event_checkFuc 0070  
                  __end_ofPL2 0434                    __end_ofPL4 013F                    __end_ofPL6 022B  
                  __end_ofPL8 0233           __size_of_Charg_Disp 0015                  _g_gloEnvt_st 006A  
            _TestFunc_Disable 0642           Sola_checkFuc@ad_sum 0040       __end_of_TIMER1_INTSTART 05E8  
        __size_of_INT_INITIAL 000B                    __pbssBANK0 005A             Sola_checkFuc@ad_v 0042  
               ??_ADC_INITIAL 0072                    __pmaintext 031C  __size_of_Mode_changeCheckFuc 0034  
                     ?___wmul 0072                    __pintentry 0004                       ?_oneGLO 0070  
              _chrg_ModeCheck 0434               EEPROMwrite@Data 0072         __size_of_GET_ADC_DATA 0025  
                     _GO_DONE 00F9                       _MSCKCON 001B          __end_of_eventExitOFF 0607  
           Solar_BaseDefine@i 0045             Solar_BaseDefine@j 0044                       _DelayMs 05B9  
                     _DelayUs 0610         __end_of_AD_baseGetFuc 0539         GET_ADC_DATA@AD_chBuff 0075  
             ??_eventEnterOFF 0072             ??_TestFunc_Enable 0072                  _GET_ADC_DATA 04B4  
            EEPROMread@EEAddr 0072             EEPROMwrite@EEAddr 0073               __size_of___wmul 0019  
      __end_of_chrg_ModeCheck 0462                       ___lwdiv 0462          AD_baseWriteFuc@ad_ch 0021  
        AD_baseWriteFuc@ad_cl 0020          AD_baseWriteFuc@ad_vh 0023          AD_baseWriteFuc@ad_vl 0022  
        AD_baseWriteFuc@ad_vt 0075               __size_of_oneGLO 000B                Sola_checkFuc@i 0045  
              Sola_checkFuc@j 0044                Sola_checkFuc@z 003F           __end_of_ADC_INITIAL 0632  
                     __ptext1 0434                       __ptext2 05A4                       __ptext3 04FD  
                     __ptext4 0632                       __ptext5 0642                       __ptext6 0159  
                     __ptext7 05E8                       __ptext8 04D9                       __ptext9 0240  
                __size_of_ISR 0028              ?_TIMER1_INTSTART 0070         __end_of_Version_Write 051B  
                     clrloop0 0623             EEPROMwrite@gietag 0074                  ??_Charg_Disp 0077  
        end_of_initialization 0039                 ??_EEPROM_Init 0075          __size_of_WDT_INITIAL 0009  
               _g_checkStBits 0068                 ??_EEPROMwrite 0073              ??_TIMER1_INTSTOP 0072  
             ?_chrg_ModeCheck 0070               _AD_baseWriteFuc 04D9            __end_of_Charg_Disp 05B9  
           ?_Solar_BaseDefine 0070      __size_of_GLO_cdsCheckFuc 0057                    main@main_i 0079  
    __end_of_TestFunc_Disable 0643            ??_Solar_BaseDefine 0027            AD_baseGetFuc@ad_vh 0077  
          AD_baseGetFuc@ad_vl 0076              ??_Event_checkFuc 0077                   _ADC_INITIAL 062A  
         __end_of_EEPROM_Init 0555                __end_of___wmul 05A4           __end_of_EEPROMwrite 0571  
              __end_of_oneGLO 05F3                 _g_gloCntTimer 0069         __size_of_eventExitOFF 0009  
               _g_gloCurValue 005E                   __end_ofPL10 030F                   __end_ofPL20 0145  
                 __end_ofPL12 0315                   __end_ofPL30 0154                   __end_ofPL22 04FD  
                 __end_ofPL14 0239                   __end_ofPL32 0159                   __end_ofPL24 014A  
                 __end_ofPL16 031C                   __end_ofPL26 03A3                   __end_ofPL18 0240  
                 __end_ofPL28 014F           start_initialization 000B                 _g_gloRecValue 0060  
                 __end_of_ISR 04B4           _Mode_changeCheckFuc 03FA          Sola_checkFuc@ad_vpre 005C  
     __end_of_AD_baseWriteFuc 04F8          ?_Mode_changeCheckFuc 0070                  _eventExitOFF 05FE  
                    ??___wmul 0076                   __pdataBANK0 0046                      ??_oneGLO 0077  
                 _g_checkMode 0047        __size_of_Sola_checkFuc 00C7        __size_of_POWER_INITIAL 001A  
               ??_INT_INITIAL 0072                   __pbssCOMMON 007A                     ___latbits 0000  
    Solar_BaseDefine@ad_total 002B                 __pcstackBANK0 0020      Solar_BaseDefine@define_t 003F  
             _TestFunc_Enable 0632               _g_light_stvalue 0067                      ?_DelayMs 0070  
                    ?_DelayUs 0070                   _EEPROM_Init 0539    GLO_cdsCheckFuc@av_check_dt 0064  
  GLO_cdsCheckFuc@av_check_lt 0065                     _g_ledkeep 007A         ??_Mode_changeCheckFuc 0077  
            ___lwdiv@dividend 0022                   _EEPROMwrite 0555                     _g_event_t 0046  
           ??_GLO_cdsCheckFuc 0078                      ?___lwdiv 0020                     __pswtext1 063E  
            Version_Write@D_d 0076              Version_Write@V_d 0075              ___lwdiv@quotient 0025  
         __end_of_INT_INITIAL 05FE             interrupt_function 0004                 _Sola_checkFuc 0240  
               _POWER_INITIAL 0571                ___wmul@product 0076                      DelayMs@a 0075  
                    DelayMs@b 0076                      DelayUs@a 0073                     clear_ram0 0622  
            ??_chrg_ModeCheck 0078              ?_AD_baseWriteFuc 0075         __end_of_eventEnterOFF 05DC  
           ___wmul@multiplier 0072        __size_of_AD_baseGetFuc 001E       __end_of_TestFunc_Enable 0638  
                 DelayMs@Time 0074                 ??_WDT_INITIAL 0072      __size_of_TIMER1_INTSTART 000C  
              ?_Sola_checkFuc 0070                ?_POWER_INITIAL 0070                   DelayUs@Time 0072  
            __size_of_DelayMs 0013              __size_of_DelayUs 0009             ?_TestFunc_Disable 0070  
                ?_ADC_INITIAL 0070            ??_TestFunc_Disable 0072        __size_of_Version_Write 001E  
   __size_of_Solar_BaseDefine 00C9              __size_of___lwdiv 002A       Solar_BaseDefine@ad_vpre 005A  
                    _g_cdsCmp 0066                   _INT_INITIAL 05F3                    _EEPROMread 0619  
             ___lwdiv@divisor 0020               ___lwdiv@counter 0024                      __ptext10 04B4  
                    __ptext11 0571                      __ptext20 05CC                      __ptext12 03FA  
                    __ptext21 0638                      __ptext13 05F3                      __ptext30 048C  
                    __ptext22 05DC                      __ptext14 03A3                      __ptext23 05B9  
                    __ptext15 058B                      __ptext24 0610                      __ptext16 0462  
                    __ptext25 0539                      __ptext17 003B                      __ptext26 0555  
                    __ptext18 05FE                      __ptext27 051B                      __ptext19 0607  
                    __ptext28 0619                      __ptext29 062A            chrg_ModeCheck@ch_i 0078  
               __size_of_main 0082        EEPROMread@ReEEPROMread 0073                 _AD_baseGetFuc 051B  
         __end_of_WDT_INITIAL 0610               Charg_Disp@chg_t 0077       __size_of_TIMER1_INTSTOP 0006  
            ?_TestFunc_Enable 0070        Solar_BaseDefine@ad_sum 0040               ??_Sola_checkFuc 0027  
               _Version_Write 04FD               ??_POWER_INITIAL 0072                      intlevel1 0000  
             _GLO_cdsCheckFuc 03A3                  ?_EEPROM_Init 0070                ?_AD_baseGetFuc 0070  
                ?_EEPROMwrite 0072             ??_TIMER1_INTSTART 0072                 ?_GET_ADC_DATA 0072  
     __size_of_Event_checkFuc 00FB                   ?_EEPROMread 0070        GLO_cdsCheckFuc@m_adpre 0078  
              ?_Version_Write 0070          Solar_BaseDefine@ad_v 0042                   _WDT_INITIAL 0607  
 __end_of_Mode_changeCheckFuc 042E               EEPROM_Init@ep_t 0075                ??_GET_ADC_DATA 0075  
